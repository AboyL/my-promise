{
  "stats": {
    "suites": 530,
    "tests": 872,
    "passes": 872,
    "pending": 0,
    "failures": 0,
    "start": "2018-09-03T02:55:35.829Z",
    "end": "2018-09-03T02:55:54.119Z",
    "duration": 18290,
    "testsRegistered": 872,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "74d41bb8-326b-4b98-b262-a2fd00f701b2",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "86fafd64-8818-433d-ae78-e6888c2999c5",
        "title": "2.1.2.1: When fulfilled, a promise: must not transition to any other state.",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.1.2.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.1.2.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "already-fulfilled",
            "fullTitle": "2.1.2.1: When fulfilled, a promise: must not transition to any other state. already-fulfilled",
            "timedOut": false,
            "duration": 102,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "test(resolved(value), done);",
            "err": {},
            "isRoot": false,
            "uuid": "01850a02-1fc8-44bb-92bd-73cc3d3e38fe",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "immediately-fulfilled",
            "fullTitle": "2.1.2.1: When fulfilled, a promise: must not transition to any other state. immediately-fulfilled",
            "timedOut": false,
            "duration": 101,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
            "err": {},
            "isRoot": false,
            "uuid": "6ce2a523-7393-42ca-b1c7-1ef461c94b8d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "eventually-fulfilled",
            "fullTitle": "2.1.2.1: When fulfilled, a promise: must not transition to any other state. eventually-fulfilled",
            "timedOut": false,
            "duration": 101,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
            "err": {},
            "isRoot": false,
            "uuid": "2dde3698-2f83-48f6-825a-de2bfa31ab89",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "trying to fulfill then immediately reject",
            "fullTitle": "2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill then immediately reject",
            "timedOut": false,
            "duration": 101,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nd.resolve(dummy);\nd.reject(dummy);\nsetTimeout(done, 100);",
            "err": {},
            "isRoot": false,
            "uuid": "d2eb88a3-0af3-4696-8a14-4e1ce90af39b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "trying to fulfill then reject, delayed",
            "fullTitle": "2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill then reject, delayed",
            "timedOut": false,
            "duration": 99,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    d.reject(dummy);\n}, 50);\nsetTimeout(done, 100);",
            "err": {},
            "isRoot": false,
            "uuid": "9565461b-a5a9-4edf-a4c6-77c25784cc81",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "trying to fulfill immediately then reject delayed",
            "fullTitle": "2.1.2.1: When fulfilled, a promise: must not transition to any other state. trying to fulfill immediately then reject delayed",
            "timedOut": false,
            "duration": 102,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n}, function onRejected() {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n});\nd.resolve(dummy);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 50);\nsetTimeout(done, 100);",
            "err": {},
            "isRoot": false,
            "uuid": "44236646-97e9-4aee-b623-2d3931900505",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "01850a02-1fc8-44bb-92bd-73cc3d3e38fe",
          "6ce2a523-7393-42ca-b1c7-1ef461c94b8d",
          "2dde3698-2f83-48f6-825a-de2bfa31ab89",
          "d2eb88a3-0af3-4696-8a14-4e1ce90af39b",
          "9565461b-a5a9-4edf-a4c6-77c25784cc81",
          "44236646-97e9-4aee-b623-2d3931900505"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 606,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "3696799d-906c-4dad-a254-a97d939c1972",
        "title": "2.1.3.1: When rejected, a promise: must not transition to any other state.",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.1.3.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.1.3.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "already-rejected",
            "fullTitle": "2.1.3.1: When rejected, a promise: must not transition to any other state. already-rejected",
            "timedOut": false,
            "duration": 101,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "test(rejected(reason), done);",
            "err": {},
            "isRoot": false,
            "uuid": "5e10bd0d-8957-47be-b744-92f51e2a922a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "immediately-rejected",
            "fullTitle": "2.1.3.1: When rejected, a promise: must not transition to any other state. immediately-rejected",
            "timedOut": false,
            "duration": 100,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
            "err": {},
            "isRoot": false,
            "uuid": "e444c5a2-566b-4025-8ef7-3c254d9c7a78",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "eventually-rejected",
            "fullTitle": "2.1.3.1: When rejected, a promise: must not transition to any other state. eventually-rejected",
            "timedOut": false,
            "duration": 102,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
            "err": {},
            "isRoot": false,
            "uuid": "903002f0-a406-4b52-90ea-6b8563e05fd8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "trying to reject then immediately fulfill",
            "fullTitle": "2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject then immediately fulfill",
            "timedOut": false,
            "duration": 101,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nd.resolve(dummy);\nsetTimeout(done, 100);",
            "err": {},
            "isRoot": false,
            "uuid": "22a3e871-bb19-48a1-8aba-78b931e693d0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "trying to reject then fulfill, delayed",
            "fullTitle": "2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject then fulfill, delayed",
            "timedOut": false,
            "duration": 100,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    d.resolve(dummy);\n}, 50);\nsetTimeout(done, 100);",
            "err": {},
            "isRoot": false,
            "uuid": "bf8dadce-2cb2-477f-a700-3a5f01fb6b55",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "trying to reject immediately then fulfill delayed",
            "fullTitle": "2.1.3.1: When rejected, a promise: must not transition to any other state. trying to reject immediately then fulfill delayed",
            "timedOut": false,
            "duration": 101,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 50);\nsetTimeout(done, 100);",
            "err": {},
            "isRoot": false,
            "uuid": "704ba2b2-6eaa-4f66-b537-43670061bf80",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5e10bd0d-8957-47be-b744-92f51e2a922a",
          "e444c5a2-566b-4025-8ef7-3c254d9c7a78",
          "903002f0-a406-4b52-90ea-6b8563e05fd8",
          "22a3e871-bb19-48a1-8aba-78b931e693d0",
          "bf8dadce-2cb2-477f-a700-3a5f01fb6b55",
          "704ba2b2-6eaa-4f66-b537-43670061bf80"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 605,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "3afd9732-644c-4ecb-8b57-a2f9b898c6cd",
        "title": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments.",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6024dad1-563f-4b6b-8a35-1ebb1eeba7d6",
            "title": "2.2.1.1: If `onFulfilled` is not a function, it must be ignored.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "9a39b5c0-c2cc-4183-af00-e1828d86f7e1",
                "title": "applied to a directly-rejected promise",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "`onFulfilled` is `undefined`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `undefined`",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2bb32b53-a301-4609-aa12-bd1ad3c7d3ee",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is `null`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `null`",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "53e2c61f-80bf-4c8e-b3fa-ab7b38bbb42d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is `false`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `false`",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "adf93cfa-8fa8-4e93-b1e4-d2c9d598b097",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is `5`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is `5`",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d6fde4ef-5178-4908-83d0-a6d64d649329",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is an object",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a directly-rejected promise `onFulfilled` is an object",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(nonFunction, function () {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "76ce139d-ac03-4b78-b9be-2108d6d3dfd0",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2bb32b53-a301-4609-aa12-bd1ad3c7d3ee",
                  "53e2c61f-80bf-4c8e-b3fa-ab7b38bbb42d",
                  "adf93cfa-8fa8-4e93-b1e4-d2c9d598b097",
                  "d6fde4ef-5178-4908-83d0-a6d64d649329",
                  "76ce139d-ac03-4b78-b9be-2108d6d3dfd0"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 13,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "c757601d-5847-4cf3-aac3-7f8df66aa5ed",
                "title": "applied to a promise rejected and then chained off of",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "`onFulfilled` is `undefined`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `undefined`",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5e8bf9cc-126d-4346-89e3-8facde9ded27",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is `null`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `null`",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a07b8635-d9ff-4a01-aec2-b5190347cd4a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is `false`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `false`",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "efe14357-408f-4fe2-bc76-5bd425b5046f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is `5`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is `5`",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4b236270-34ad-4794-99cc-1f7a2ecc0ee7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is an object",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.1: If `onFulfilled` is not a function, it must be ignored. applied to a promise rejected and then chained off of `onFulfilled` is an object",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "rejected(dummy).then(function () { }, undefined).then(nonFunction, function () {\n    done();\n});",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cf0256b1-27b4-4aba-8389-e0a6a663bdec",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5e8bf9cc-126d-4346-89e3-8facde9ded27",
                  "a07b8635-d9ff-4a01-aec2-b5190347cd4a",
                  "efe14357-408f-4fe2-bc76-5bd425b5046f",
                  "4b236270-34ad-4794-99cc-1f7a2ecc0ee7",
                  "cf0256b1-27b4-4aba-8389-e0a6a663bdec"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 20,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "07da2057-d218-4e6b-bb15-d4bf0b239ce8",
            "title": "2.2.1.2: If `onRejected` is not a function, it must be ignored.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "2e30e601-2d89-4a02-8e97-f92efaac2674",
                "title": "applied to a directly-fulfilled promise",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "`onRejected` is `undefined`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `undefined`",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "431f94f4-7111-4384-8b6c-db886038f726",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onRejected` is `null`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `null`",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c945a780-bed2-4101-bcd2-cb80f481e30c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onRejected` is `false`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `false`",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f9da129-3be7-44a3-83ec-6c1b335dd082",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onRejected` is `5`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is `5`",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9c08653-bf6d-451f-a6cd-8b9c87355242",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onRejected` is an object",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a directly-fulfilled promise `onRejected` is an object",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(function () {\n    done();\n}, nonFunction);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f5f7c4b-c646-4bcf-9395-71cb84f8566e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "431f94f4-7111-4384-8b6c-db886038f726",
                  "c945a780-bed2-4101-bcd2-cb80f481e30c",
                  "4f9da129-3be7-44a3-83ec-6c1b335dd082",
                  "d9c08653-bf6d-451f-a6cd-8b9c87355242",
                  "7f5f7c4b-c646-4bcf-9395-71cb84f8566e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 8,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "2bbe4134-7517-45fd-ad68-846971d49295",
                "title": "applied to a promise fulfilled and then chained off of",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.1.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "`onFulfilled` is `undefined`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `undefined`",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7841d76e-d1c2-411b-b0b8-d2bfc870a4e7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is `null`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `null`",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "28cb91be-0f9f-4d74-922a-83b170a554ec",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is `false`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `false`",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c71cc63a-57c9-4e79-bfbc-2aa7cf5aca8b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is `5`",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is `5`",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe36cda8-4e48-4b19-a5c1-b7d95e031b2c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "`onFulfilled` is an object",
                    "fullTitle": "2.2.1: Both `onFulfilled` and `onRejected` are optional arguments. 2.2.1.2: If `onRejected` is not a function, it must be ignored. applied to a promise fulfilled and then chained off of `onFulfilled` is an object",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "resolved(dummy).then(undefined, function () { }).then(function () {\n    done();\n}, nonFunction);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f3f8cd98-70f6-4d63-a886-782f2bc7128c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7841d76e-d1c2-411b-b0b8-d2bfc870a4e7",
                  "28cb91be-0f9f-4d74-922a-83b170a554ec",
                  "c71cc63a-57c9-4e79-bfbc-2aa7cf5aca8b",
                  "fe36cda8-4e48-4b19-a5c1-b7d95e031b2c",
                  "f3f8cd98-70f6-4d63-a886-782f2bc7128c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 17,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "a84ffc22-fbd7-4f4f-afc2-e6544aaf403b",
        "title": "2.2.2: If `onFulfilled` is a function,",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.2.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.2.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "89ae2573-f88e-41b2-897d-03c084c2720a",
            "title": "2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.2.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.2.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. already-fulfilled",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "e3d51808-c4fe-4347-923b-8b90ec31c8d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. immediately-fulfilled",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "46c998c6-ba96-41af-8836-973678ba71ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "2.2.2: If `onFulfilled` is a function, 2.2.2.1: it must be called after `promise` is fulfilled, with `promise`’s fulfillment value as its first argument. eventually-fulfilled",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "ecbf0de8-8e04-4470-90a1-8d0bb3c050d7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e3d51808-c4fe-4347-923b-8b90ec31c8d9",
              "46c998c6-ba96-41af-8836-973678ba71ef",
              "ecbf0de8-8e04-4470-90a1-8d0bb3c050d7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 55,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "2b6fd558-d246-4d76-83d5-d1ea54b6e580",
            "title": "2.2.2.2: it must not be called before `promise` is fulfilled",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.2.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.2.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "fulfilled after a delay",
                "fullTitle": "2.2.2: If `onFulfilled` is a function, 2.2.2.2: it must not be called before `promise` is fulfilled fulfilled after a delay",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar isFulfilled = false;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(isFulfilled, true);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    isFulfilled = true;\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "9a4c1ad9-7fd9-4dbb-b1d1-e41e534d0aad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "never fulfilled",
                "fullTitle": "2.2.2: If `onFulfilled` is a function, 2.2.2.2: it must not be called before `promise` is fulfilled never fulfilled",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n    done();\n});\nsetTimeout(function () {\n    assert.strictEqual(onFulfilledCalled, false);\n    done();\n}, 150);",
                "err": {},
                "isRoot": false,
                "uuid": "f81cbac2-1371-4919-8c33-86e68795f57a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9a4c1ad9-7fd9-4dbb-b1d1-e41e534d0aad",
              "f81cbac2-1371-4919-8c33-86e68795f57a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 203,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "cd06d0b5-dba1-4c32-bbca-cee684425b86",
            "title": "2.2.2.3: it must not be called more than once.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.2.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.2.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. already-fulfilled",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var timesCalled = 0;\nresolved(dummy).then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "edb0f879-109c-4c77-ae08-8b3e12af66c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill a pending promise more than once, immediately",
                "fullTitle": "2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, immediately",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.resolve(dummy);\nd.resolve(dummy);",
                "err": {},
                "isRoot": false,
                "uuid": "2d4fd861-2fb1-4245-8c57-17ec5251189c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill a pending promise more than once, delayed",
                "fullTitle": "2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, delayed",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nsetTimeout(function () {\n    d.resolve(dummy);\n    d.resolve(dummy);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "85d62777-7533-4648-ba72-ab22cb9a2076",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to fulfill a pending promise more than once, immediately then delayed",
                "fullTitle": "2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. trying to fulfill a pending promise more than once, immediately then delayed",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.resolve(dummy);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "bac8cd79-cca7-4cde-a389-6c828f730a33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when multiple `then` calls are made, spaced apart in time",
                "fullTitle": "2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. when multiple `then` calls are made, spaced apart in time",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar timesCalled = [0, 0, 0];\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nsetTimeout(function () {\n    d.promise.then(function onFulfilled() {\n        assert.strictEqual(++timesCalled[1], 1);\n    });\n}, 50);\nsetTimeout(function () {\n    d.promise.then(function onFulfilled() {\n        assert.strictEqual(++timesCalled[2], 1);\n        done();\n    });\n}, 100);\nsetTimeout(function () {\n    d.resolve(dummy);\n}, 150);",
                "err": {},
                "isRoot": false,
                "uuid": "f9ae6fb1-d865-4c70-9314-20a21a001dde",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when `then` is interleaved with fulfillment",
                "fullTitle": "2.2.2: If `onFulfilled` is a function, 2.2.2.3: it must not be called more than once. when `then` is interleaved with fulfillment",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar timesCalled = [0, 0];\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nd.resolve(dummy);\nd.promise.then(function onFulfilled() {\n    assert.strictEqual(++timesCalled[1], 1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "ccb0148e-7b5f-485c-b106-7f36dc215a55",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "edb0f879-109c-4c77-ae08-8b3e12af66c7",
              "2d4fd861-2fb1-4245-8c57-17ec5251189c",
              "85d62777-7533-4648-ba72-ab22cb9a2076",
              "bac8cd79-cca7-4cde-a389-6c828f730a33",
              "f9ae6fb1-d865-4c70-9314-20a21a001dde",
              "ccb0148e-7b5f-485c-b106-7f36dc215a55"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 216,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "3981434b-31a0-4c28-bc78-143a23e89cbe",
        "title": "2.2.3: If `onRejected` is a function,",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.3.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.3.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "76daccd0-279f-486f-b470-fde46da95e6b",
            "title": "2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.3.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.3.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-rejected",
                "fullTitle": "2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. already-rejected",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "2f2c00dd-1d5b-4e8d-8aa3-0077442fdcdc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. immediately-rejected",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "1aeb8f73-f780-4432-bab2-8c65f1e103b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "2.2.3: If `onRejected` is a function, 2.2.3.1: it must be called after `promise` is rejected, with `promise`’s rejection reason as its first argument. eventually-rejected",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "08a57929-cd42-4287-8592-bb22b677bf93",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2f2c00dd-1d5b-4e8d-8aa3-0077442fdcdc",
              "1aeb8f73-f780-4432-bab2-8c65f1e103b3",
              "08a57929-cd42-4287-8592-bb22b677bf93"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 55,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "5a4bddbf-1410-4806-9622-41e99d799f71",
            "title": "2.2.3.2: it must not be called before `promise` is rejected",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.3.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.3.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "rejected after a delay",
                "fullTitle": "2.2.3: If `onRejected` is a function, 2.2.3.2: it must not be called before `promise` is rejected rejected after a delay",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar isRejected = false;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(isRejected, true);\n    done();\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    isRejected = true;\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "f688050e-c76d-48d6-abd9-50cbe19569db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "never rejected",
                "fullTitle": "2.2.3: If `onRejected` is a function, 2.2.3.2: it must not be called before `promise` is rejected never rejected",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n    done();\n});\nsetTimeout(function () {\n    assert.strictEqual(onRejectedCalled, false);\n    done();\n}, 150);",
                "err": {},
                "isRoot": false,
                "uuid": "8f497451-a7d9-4f15-9a0b-a2befc7e8d57",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f688050e-c76d-48d6-abd9-50cbe19569db",
              "8f497451-a7d9-4f15-9a0b-a2befc7e8d57"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 204,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "ee10e93b-c25a-478d-9869-f7c8b74cb49a",
            "title": "2.2.3.3: it must not be called more than once.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.3.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.3.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-rejected",
                "fullTitle": "2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. already-rejected",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var timesCalled = 0;\nrejected(dummy).then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "2642b404-e36d-4ea8-a291-2459b7bf4d01",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject a pending promise more than once, immediately",
                "fullTitle": "2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, immediately",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.reject(dummy);\nd.reject(dummy);",
                "err": {},
                "isRoot": false,
                "uuid": "5795a743-9a6d-49c3-a007-0e5fc7e405cc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject a pending promise more than once, delayed",
                "fullTitle": "2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, delayed",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nsetTimeout(function () {\n    d.reject(dummy);\n    d.reject(dummy);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "a9a23a6a-58ee-47cd-ab2f-2d3f749f93f5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "trying to reject a pending promise more than once, immediately then delayed",
                "fullTitle": "2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. trying to reject a pending promise more than once, immediately then delayed",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar timesCalled = 0;\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled, 1);\n    done();\n});\nd.reject(dummy);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "4fbbb342-330c-45c6-aec5-6d42ab1af285",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when multiple `then` calls are made, spaced apart in time",
                "fullTitle": "2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. when multiple `then` calls are made, spaced apart in time",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar timesCalled = [0, 0, 0];\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nsetTimeout(function () {\n    d.promise.then(null, function onRejected() {\n        assert.strictEqual(++timesCalled[1], 1);\n    });\n}, 50);\nsetTimeout(function () {\n    d.promise.then(null, function onRejected() {\n        assert.strictEqual(++timesCalled[2], 1);\n        done();\n    });\n}, 100);\nsetTimeout(function () {\n    d.reject(dummy);\n}, 150);",
                "err": {},
                "isRoot": false,
                "uuid": "b50378d7-3cac-461b-b3f2-04debe039575",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when `then` is interleaved with rejection",
                "fullTitle": "2.2.3: If `onRejected` is a function, 2.2.3.3: it must not be called more than once. when `then` is interleaved with rejection",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar timesCalled = [0, 0];\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[0], 1);\n});\nd.reject(dummy);\nd.promise.then(null, function onRejected() {\n    assert.strictEqual(++timesCalled[1], 1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "9de5f216-8cdb-4600-902f-e12c68878d62",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2642b404-e36d-4ea8-a291-2459b7bf4d01",
              "5795a743-9a6d-49c3-a007-0e5fc7e405cc",
              "a9a23a6a-58ee-47cd-ab2f-2d3f749f93f5",
              "4fbbb342-330c-45c6-aec5-6d42ab1af285",
              "b50378d7-3cac-461b-b3f2-04debe039575",
              "9de5f216-8cdb-4600-902f-e12c68878d62"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 209,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "bc547421-d5a5-4d87-9382-18ad1e424d5a",
        "title": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code.",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.4.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.4.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9b2af9b6-46e6-49de-a5b4-ee6997825506",
            "title": "`then` returns before the promise becomes fulfilled or rejected",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.4.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.4.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected already-fulfilled",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "23e1382b-c016-4c2e-9e9e-1c8d44e70d0c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected immediately-fulfilled",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "53d62385-6240-4b53-a6b1-a069419f314f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected eventually-fulfilled",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "f8508770-6558-4e39-891b-ca2fa39be37e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "already-rejected",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected already-rejected",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "e9c5a081-8a62-47fc-a13b-5c3a0a71b653",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected immediately-rejected",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "2dba43c7-4d0f-49f9-bd6a-3c8f423c337c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. `then` returns before the promise becomes fulfilled or rejected eventually-rejected",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "bff9f811-a44f-43bf-b7ab-ec97833aaa08",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "23e1382b-c016-4c2e-9e9e-1c8d44e70d0c",
              "53d62385-6240-4b53-a6b1-a069419f314f",
              "f8508770-6558-4e39-891b-ca2fa39be37e",
              "e9c5a081-8a62-47fc-a13b-5c3a0a71b653",
              "2dba43c7-4d0f-49f9-bd6a-3c8f423c337c",
              "bff9f811-a44f-43bf-b7ab-ec97833aaa08"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 113,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "e523d4c4-07c0-40e8-b61b-54ff25017272",
            "title": "Clean-stack execution ordering tests (fulfillment case)",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.4.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.4.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "when `onFulfilled` is added immediately before the promise is fulfilled",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added immediately before the promise is fulfilled",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n});\nd.resolve(dummy);\nassert.strictEqual(onFulfilledCalled, false);",
                "err": {},
                "isRoot": false,
                "uuid": "067a41f9-05f9-4d35-bce4-8925c372730e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when `onFulfilled` is added immediately after the promise is fulfilled",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added immediately after the promise is fulfilled",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onFulfilledCalled = false;\nd.resolve(dummy);\nd.promise.then(function onFulfilled() {\n    onFulfilledCalled = true;\n});\nassert.strictEqual(onFulfilledCalled, false);",
                "err": {},
                "isRoot": false,
                "uuid": "8f59c66d-8006-4b17-81cb-13e78e93cb35",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when one `onFulfilled` is added inside another `onFulfilled`",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when one `onFulfilled` is added inside another `onFulfilled`",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = resolved();\nvar firstOnFulfilledFinished = false;\npromise.then(function () {\n    promise.then(function () {\n        assert.strictEqual(firstOnFulfilledFinished, true);\n        done();\n    });\n    firstOnFulfilledFinished = true;\n});",
                "err": {},
                "isRoot": false,
                "uuid": "cf5a48aa-5de1-48f6-ad5f-603ac1860308",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when `onFulfilled` is added inside an `onRejected`",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when `onFulfilled` is added inside an `onRejected`",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = rejected();\nvar promise2 = resolved();\nvar firstOnRejectedFinished = false;\npromise.then(null, function () {\n    promise2.then(function () {\n        assert.strictEqual(firstOnRejectedFinished, true);\n        done();\n    });\n    firstOnRejectedFinished = true;\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bcafb46c-15c7-4f37-ac97-2cab1de8991e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when the promise is fulfilled asynchronously",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (fulfillment case) when the promise is fulfilled asynchronously",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar firstStackFinished = false;\nsetTimeout(function () {\n    d.resolve(dummy);\n    firstStackFinished = true;\n}, 0);\nd.promise.then(function () {\n    assert.strictEqual(firstStackFinished, true);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8f0fbc6a-8cd3-41a8-8ae3-9eb17d0dfc76",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "067a41f9-05f9-4d35-bce4-8925c372730e",
              "8f59c66d-8006-4b17-81cb-13e78e93cb35",
              "cf5a48aa-5de1-48f6-ad5f-603ac1860308",
              "bcafb46c-15c7-4f37-ac97-2cab1de8991e",
              "8f0fbc6a-8cd3-41a8-8ae3-9eb17d0dfc76"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "212e21f2-cad8-4778-964f-0ef9c0134335",
            "title": "Clean-stack execution ordering tests (rejection case)",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.4.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.4.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "when `onRejected` is added immediately before the promise is rejected",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added immediately before the promise is rejected",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n});\nd.reject(dummy);\nassert.strictEqual(onRejectedCalled, false);",
                "err": {},
                "isRoot": false,
                "uuid": "b6c98a21-9a25-4fa8-9c33-035c42a005fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when `onRejected` is added immediately after the promise is rejected",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added immediately after the promise is rejected",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar onRejectedCalled = false;\nd.reject(dummy);\nd.promise.then(null, function onRejected() {\n    onRejectedCalled = true;\n});\nassert.strictEqual(onRejectedCalled, false);",
                "err": {},
                "isRoot": false,
                "uuid": "5ff6a5c7-8589-43f4-8a22-884ed19c3853",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when `onRejected` is added inside an `onFulfilled`",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when `onRejected` is added inside an `onFulfilled`",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = resolved();\nvar promise2 = rejected();\nvar firstOnFulfilledFinished = false;\npromise.then(function () {\n    promise2.then(null, function () {\n        assert.strictEqual(firstOnFulfilledFinished, true);\n        done();\n    });\n    firstOnFulfilledFinished = true;\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4af5845d-35b5-4197-a12b-f89670758059",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when one `onRejected` is added inside another `onRejected`",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when one `onRejected` is added inside another `onRejected`",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = rejected();\nvar firstOnRejectedFinished = false;\npromise.then(null, function () {\n    promise.then(null, function () {\n        assert.strictEqual(firstOnRejectedFinished, true);\n        done();\n    });\n    firstOnRejectedFinished = true;\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e57a7ffb-045d-40c9-a0bb-a85f10974c38",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "when the promise is rejected asynchronously",
                "fullTitle": "2.2.4: `onFulfilled` or `onRejected` must not be called until the execution context stack contains only platform code. Clean-stack execution ordering tests (rejection case) when the promise is rejected asynchronously",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\nvar firstStackFinished = false;\nsetTimeout(function () {\n    d.reject(dummy);\n    firstStackFinished = true;\n}, 0);\nd.promise.then(null, function () {\n    assert.strictEqual(firstStackFinished, true);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "60ce2b87-a2c8-4648-a60f-b8a983f77eba",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b6c98a21-9a25-4fa8-9c33-035c42a005fa",
              "5ff6a5c7-8589-43f4-8a22-884ed19c3853",
              "4af5845d-35b5-4197-a12b-f89670758059",
              "e57a7ffb-045d-40c9-a0bb-a85f10974c38",
              "60ce2b87-a2c8-4648-a60f-b8a983f77eba"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 16,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "de69ef55-b67e-4ab4-9773-17fc0738737a",
        "title": "2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value).",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.5.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.5.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "3c9e5285-eb88-4144-bbcc-01298d99e113",
            "title": "strict mode",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.5.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.5.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "fulfilled",
                "fullTitle": "2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). strict mode fulfilled",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "resolved(dummy).then(function onFulfilled() {\n    \"use strict\";\n    assert.strictEqual(this, undefined);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0c8ea8fd-9d5d-4919-86de-752294222bcc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "rejected",
                "fullTitle": "2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). strict mode rejected",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "rejected(dummy).then(null, function onRejected() {\n    \"use strict\";\n    assert.strictEqual(this, undefined);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4418d82d-675c-471d-b725-863f8472e2e5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0c8ea8fd-9d5d-4919-86de-752294222bcc",
              "4418d82d-675c-471d-b725-863f8472e2e5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 5,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "54344495-1cfa-4896-b83a-e1ea327cc54c",
            "title": "sloppy mode",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.5.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.5.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "fulfilled",
                "fullTitle": "2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). sloppy mode fulfilled",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "resolved(dummy).then(function onFulfilled() {\n    assert.strictEqual(this, global);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "8885f680-b7d0-4c6c-b441-850a94b066e4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "rejected",
                "fullTitle": "2.2.5 `onFulfilled` and `onRejected` must be called as functions (i.e. with no `this` value). sloppy mode rejected",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "rejected(dummy).then(null, function onRejected() {\n    assert.strictEqual(this, global);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "63d44aea-3457-4eff-962f-50965d3708dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8885f680-b7d0-4c6c-b441-850a94b066e4",
              "63d44aea-3457-4eff-962f-50965d3708dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "d4487433-eb1b-45ab-bc18-da65b453e018",
        "title": "2.2.6: `then` may be called multiple times on the same promise.",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "eada742f-c59e-4347-9c75-b7606818055e",
            "title": "2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "fb0fdabb-9fb0-4c7f-995d-85851df33556",
                "title": "multiple boring fulfillment handlers",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers already-fulfilled",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea984b3a-cd78-49d7-a9d7-874abb0744df",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers immediately-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "281fc0d2-65d1-4c31-a169-d7fd42606070",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple boring fulfillment handlers eventually-fulfilled",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cabbe01d-2584-44b0-b32f-2181727b1ce1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ea984b3a-cd78-49d7-a9d7-874abb0744df",
                  "281fc0d2-65d1-4c31-a169-d7fd42606070",
                  "cabbe01d-2584-44b0-b32f-2181727b1ce1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 64,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "c6f44bc8-f49a-4eab-ac6c-38be622a372b",
                "title": "multiple fulfillment handlers, one of which throws",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws already-fulfilled",
                    "timedOut": false,
                    "duration": 7,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b4e74ae0-050c-40c5-9323-bd0453dee518",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws immediately-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae333db3-431c-437b-91ee-7f3ffd6fc747",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. multiple fulfillment handlers, one of which throws eventually-fulfilled",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93b3c964-ea25-4a54-9e3b-334543a306a1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b4e74ae0-050c-40c5-9323-bd0453dee518",
                  "ae333db3-431c-437b-91ee-7f3ffd6fc747",
                  "93b3c964-ea25-4a54-9e3b-334543a306a1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 68,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "30f2cdfb-6036-4ac7-9108-6b12f4162120",
                "title": "results in multiple branching chains with their own fulfillment values",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values already-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f790de8-ce76-4775-bf55-3d16c3fa14f6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values immediately-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe88bf32-8b52-4a38-a33f-6fd53c1209cc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values eventually-fulfilled",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eeb608f4-fb3e-48fd-bc1d-a7a8ff029627",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8f790de8-ce76-4775-bf55-3d16c3fa14f6",
                  "fe88bf32-8b52-4a38-a33f-6fd53c1209cc",
                  "eeb608f4-fb3e-48fd-bc1d-a7a8ff029627"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 63,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "4d5a2a0a-4b69-4576-881d-b64da908f7fb",
                "title": "`onFulfilled` handlers are called in the original order",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order already-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e6ef9e2e-2a28-4ed3-bcff-0644d57689f7",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order immediately-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ff6f2660-ad36-4ad2-98bb-ae8b6b84cfb5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order eventually-fulfilled",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b626a98-0fee-4060-8f54-65b41b024cdf",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [
                  {
                    "uuid": "5454ed4b-db72-4300-b84b-a66461dfe5cd",
                    "title": "even when one handler is added inside another handler",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-fulfilled",
                        "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler already-fulfilled",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(resolved(value), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "eba634b6-9478-4113-a719-0ed9f3e0be24",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-fulfilled",
                        "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler immediately-fulfilled",
                        "timedOut": false,
                        "duration": 20,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "25e5807b-068b-4cac-9575-cf777f56a3b7",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-fulfilled",
                        "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.1: If/when `promise` is fulfilled, all respective `onFulfilled` callbacks must execute in the order of their originating calls to `then`. `onFulfilled` handlers are called in the original order even when one handler is added inside another handler eventually-fulfilled",
                        "timedOut": false,
                        "duration": 70,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "86aa0f7d-82c3-40e7-8543-e099311ad787",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "eba634b6-9478-4113-a719-0ed9f3e0be24",
                      "25e5807b-068b-4cac-9575-cf777f56a3b7",
                      "86aa0f7d-82c3-40e7-8543-e099311ad787"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 108,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  }
                ],
                "passes": [
                  "e6ef9e2e-2a28-4ed3-bcff-0644d57689f7",
                  "ff6f2660-ad36-4ad2-98bb-ae8b6b84cfb5",
                  "6b626a98-0fee-4060-8f54-65b41b024cdf"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 62,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "0ef64b84-db03-4748-a984-34c5bb180b06",
            "title": "2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "497b4480-04b7-463c-9ffd-df5d692f7c70",
                "title": "multiple boring rejection handlers",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "196ef467-6d62-4519-a577-5a9a7910353b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers immediately-rejected",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e74663b5-117f-4073-b977-a3fa213cf68c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple boring rejection handlers eventually-rejected",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "51e07f62-1a7b-449f-9874-4282047d5412",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "196ef467-6d62-4519-a577-5a9a7910353b",
                  "e74663b5-117f-4073-b977-a3fa213cf68c",
                  "51e07f62-1a7b-449f-9874-4282047d5412"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 65,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "5bbf9c51-8428-4b1b-b03b-b21eb4032da3",
                "title": "multiple rejection handlers, one of which throws",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2f58d6eb-7814-4f07-b4a1-2410cfdd6f66",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws immediately-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "137bc54f-5d5f-4dc6-9329-1133053c36a4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. multiple rejection handlers, one of which throws eventually-rejected",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f59c002b-d148-4d25-8109-eac45055b2a5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2f58d6eb-7814-4f07-b4a1-2410cfdd6f66",
                  "137bc54f-5d5f-4dc6-9329-1133053c36a4",
                  "f59c002b-d148-4d25-8109-eac45055b2a5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 65,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "7e766cde-de5e-4154-bd3e-f282bdce4be4",
                "title": "results in multiple branching chains with their own fulfillment values",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2fc4a67b-0fa2-4274-a956-a033a03b37e2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "00063dcc-4388-4452-af15-4561d4416544",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. results in multiple branching chains with their own fulfillment values eventually-rejected",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ca7c81b9-46d8-4324-a319-0f5d2b89b1b5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "2fc4a67b-0fa2-4274-a956-a033a03b37e2",
                  "00063dcc-4388-4452-af15-4561d4416544",
                  "ca7c81b9-46d8-4324-a319-0f5d2b89b1b5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 58,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "e186460f-8fa4-451b-bf51-5dd40c0327c7",
                "title": "`onRejected` handlers are called in the original order",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c006a23a-c4db-4a52-88a6-3efd84441186",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order immediately-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0e9426d2-4bee-4160-8564-bc85a0d23448",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order eventually-rejected",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54874441-23ab-4f7a-8e32-f700bbd9c801",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [
                  {
                    "uuid": "799e553c-de21-449b-9bd5-d120ecf92982",
                    "title": "even when one handler is added inside another handler",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.6.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "already-rejected",
                        "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler already-rejected",
                        "timedOut": false,
                        "duration": 19,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "test(rejected(reason), done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e38cfec9-192d-425b-a5de-b66019a6701e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "immediately-rejected",
                        "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler immediately-rejected",
                        "timedOut": false,
                        "duration": 18,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8182469b-867d-41f7-bbac-5bbf057fd557",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "eventually-rejected",
                        "fullTitle": "2.2.6: `then` may be called multiple times on the same promise. 2.2.6.2: If/when `promise` is rejected, all respective `onRejected` callbacks must execute in the order of their originating calls to `then`. `onRejected` handlers are called in the original order even when one handler is added inside another handler eventually-rejected",
                        "timedOut": false,
                        "duration": 67,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "fe98e0c3-454a-4864-8c6e-cf0cf4c0dd70",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e38cfec9-192d-425b-a5de-b66019a6701e",
                      "8182469b-867d-41f7-bbac-5bbf057fd557",
                      "fe98e0c3-454a-4864-8c6e-cf0cf4c0dd70"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 104,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  }
                ],
                "passes": [
                  "c006a23a-c4db-4a52-88a6-3efd84441186",
                  "0e9426d2-4bee-4160-8564-bc85a0d23448",
                  "54874441-23ab-4f7a-8e32-f700bbd9c801"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 60,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "1e5f90a5-99a6-4951-9a69-ac46985fb5b3",
        "title": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)`",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "is a promise",
            "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` is a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var promise1 = deferred().promise;\nvar promise2 = promise1.then();\nassert(typeof promise2 === \"object\" || typeof promise2 === \"function\");\nassert.notStrictEqual(promise2, null);\nassert.strictEqual(typeof promise2.then, \"function\");",
            "err": {},
            "isRoot": false,
            "uuid": "d54d6d1c-258f-489d-a515-b50b5029f9b2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [
          {
            "uuid": "442bac99-e0f9-441d-b0b9-2babcff060c2",
            "title": "2.2.7.1: If either `onFulfilled` or `onRejected` returns a value `x`, run the Promise Resolution Procedure `[[Resolve]](promise2, x)`",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "see separate 3.3 tests",
                "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.1: If either `onFulfilled` or `onRejected` returns a value `x`, run the Promise Resolution Procedure `[[Resolve]](promise2, x)` see separate 3.3 tests",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "f3385648-5067-4dc9-bfca-9fe269060a55",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f3385648-5067-4dc9-bfca-9fe269060a55"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "49967898-67fe-4b8b-9b08-f2125fead922",
            "title": "2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c01f766c-fffd-4a7c-b757-0e925b0f7fc0",
                "title": "The reason is `undefined`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` already-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c0555bce-19ee-4ce1-bf73-ce3277b30fe4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3fd304ab-4976-4f92-bf33-079ea280e5bc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3238c04-4369-4ecb-91fa-c16270f4c46d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7004e042-55cb-4132-933f-80d31464d9a1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "44e471bb-b794-41f7-9bb0-f5b9aca07c9d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `undefined` eventually-rejected",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18d2620a-162c-4295-93fa-9aad3a2b356a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c0555bce-19ee-4ce1-bf73-ce3277b30fe4",
                  "3fd304ab-4976-4f92-bf33-079ea280e5bc",
                  "e3238c04-4369-4ecb-91fa-c16270f4c46d",
                  "7004e042-55cb-4132-933f-80d31464d9a1",
                  "44e471bb-b794-41f7-9bb0-f5b9aca07c9d",
                  "18d2620a-162c-4295-93fa-9aad3a2b356a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 122,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "f7bff4e4-96d7-4afa-b132-3124a97473c6",
                "title": "The reason is `null`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` already-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f1f3e6e8-b264-414b-b4f7-3c7459ef83f3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2eca1890-6d77-49d4-9228-d4c0f685e479",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "44061007-ce87-44f3-a4b2-f88f8f2bfe17",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "548210ad-8b1d-460e-aaf3-e08c8f69427a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` immediately-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7dfbd0e7-2b2f-4fa5-88b4-488b97f3bd7d",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `null` eventually-rejected",
                    "timedOut": false,
                    "duration": 52,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2af0a982-cd57-4aa2-ace5-0487722c0a8d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "f1f3e6e8-b264-414b-b4f7-3c7459ef83f3",
                  "2eca1890-6d77-49d4-9228-d4c0f685e479",
                  "44061007-ce87-44f3-a4b2-f88f8f2bfe17",
                  "548210ad-8b1d-460e-aaf3-e08c8f69427a",
                  "7dfbd0e7-2b2f-4fa5-88b4-488b97f3bd7d",
                  "2af0a982-cd57-4aa2-ace5-0487722c0a8d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 118,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "79f090b5-09da-4ef7-8e3f-2e38fd6d3b81",
                "title": "The reason is `false`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` already-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "de24af85-dde0-41b3-9711-f60741ba0e4c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e029ac7e-3e0f-497b-8b7f-169c2fb78932",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e541c1c8-dd5f-407c-878c-50ac2352ba64",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f5816541-2505-4744-ae83-9752e34d10bf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8ea8e304-a333-4b96-84e3-e25df50ff662",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `false` eventually-rejected",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b8a13a67-7878-4337-b266-6916d817b176",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "de24af85-dde0-41b3-9711-f60741ba0e4c",
                  "e029ac7e-3e0f-497b-8b7f-169c2fb78932",
                  "e541c1c8-dd5f-407c-878c-50ac2352ba64",
                  "f5816541-2505-4744-ae83-9752e34d10bf",
                  "8ea8e304-a333-4b96-84e3-e25df50ff662",
                  "b8a13a67-7878-4337-b266-6916d817b176"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 126,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "bb561fc6-246d-4d33-a368-8c5b5b98cf60",
                "title": "The reason is `0`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` already-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c67efe0-ce30-4642-8eaa-fe5e203d3824",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "22482509-721c-475e-b13c-f6659dae4ec0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e110aac1-8050-48a2-b301-c1e15ec78bb2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "42d65c43-5989-4ff2-bc0b-e62a222ce074",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` immediately-rejected",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "68f2e019-99ad-4a5e-ad88-ebcba8f6b92c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is `0` eventually-rejected",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1fa1217d-02d4-418c-995e-f657d1a7ad32",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7c67efe0-ce30-4642-8eaa-fe5e203d3824",
                  "22482509-721c-475e-b13c-f6659dae4ec0",
                  "e110aac1-8050-48a2-b301-c1e15ec78bb2",
                  "42d65c43-5989-4ff2-bc0b-e62a222ce074",
                  "68f2e019-99ad-4a5e-ad88-ebcba8f6b92c",
                  "1fa1217d-02d4-418c-995e-f657d1a7ad32"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 122,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "25f4316c-dcab-4114-b2ad-46b5eae8f29c",
                "title": "The reason is an error",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error already-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c87d1fc6-03cb-4cd8-905c-f203c6b2a73f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error immediately-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d9bc6cb7-3e53-413c-b02b-98c9a0b306e1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3bb46483-6c87-4f35-a9dd-9fbabb5c43e1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d6b9bad-2b49-4c23-9267-61e12dbe5b5f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eef83f0e-b836-4db7-9b97-de831132627a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error eventually-rejected",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1c12fea4-fee8-4254-8f3b-9e26bd984a09",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "c87d1fc6-03cb-4cd8-905c-f203c6b2a73f",
                  "d9bc6cb7-3e53-413c-b02b-98c9a0b306e1",
                  "3bb46483-6c87-4f35-a9dd-9fbabb5c43e1",
                  "4d6b9bad-2b49-4c23-9267-61e12dbe5b5f",
                  "eef83f0e-b836-4db7-9b97-de831132627a",
                  "1c12fea4-fee8-4254-8f3b-9e26bd984a09"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 121,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "56008fc0-89b8-400e-900e-5f8b384da863",
                "title": "The reason is an error without a stack",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack already-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7ebe3c8a-fb66-4f75-ba04-b501c10a34bd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack immediately-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "24164a2e-b8cb-47c6-8def-d9482da21373",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack eventually-fulfilled",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "51cc4bb7-936a-47aa-b8f2-fb631e60caf2",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61ed9c6e-992d-4e3c-8841-9511f89070f5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "117d1f2e-574e-49d1-a349-6a6926188406",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an error without a stack eventually-rejected",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ddcd4637-c158-40e3-bbe9-bf0af78d7dac",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7ebe3c8a-fb66-4f75-ba04-b501c10a34bd",
                  "24164a2e-b8cb-47c6-8def-d9482da21373",
                  "51cc4bb7-936a-47aa-b8f2-fb631e60caf2",
                  "61ed9c6e-992d-4e3c-8841-9511f89070f5",
                  "117d1f2e-574e-49d1-a349-6a6926188406",
                  "ddcd4637-c158-40e3-bbe9-bf0af78d7dac"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 121,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "c2d2e6ab-5b9b-454b-bb2e-09d2d8c5e890",
                "title": "The reason is a date",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date already-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "25fb06bb-0e2f-44a8-acf4-def1f3fc349a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date immediately-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8649bea9-2f8f-4c70-b364-fc4a301beb45",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d19993a0-f4b6-47db-8334-347dc4757271",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0134d272-eff2-441b-9d4b-01bd45685d7e",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "17dd9d2a-9404-495c-94b3-c3c86d8a550a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a date eventually-rejected",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2564aea8-e513-4a29-8688-5422dd2b2f3e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "25fb06bb-0e2f-44a8-acf4-def1f3fc349a",
                  "8649bea9-2f8f-4c70-b364-fc4a301beb45",
                  "d19993a0-f4b6-47db-8334-347dc4757271",
                  "0134d272-eff2-441b-9d4b-01bd45685d7e",
                  "17dd9d2a-9404-495c-94b3-c3c86d8a550a",
                  "2564aea8-e513-4a29-8688-5422dd2b2f3e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 121,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "98c4c43e-80fb-4995-b022-bce059dde3f9",
                "title": "The reason is an object",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object already-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8939e405-2178-4ff0-8702-46d2a852e84b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object immediately-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0963d5df-d314-48d2-9572-52d460264c79",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object eventually-fulfilled",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4f4b2530-33c9-4228-ad6e-353a0025cb1c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dde56eb0-60c6-427d-8e7a-b4f5ded5e3aa",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object immediately-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fa45e502-049c-4a0b-96d5-4c594b41e2c8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an object eventually-rejected",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f42aadca-db22-4b42-8083-75961f29ad82",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8939e405-2178-4ff0-8702-46d2a852e84b",
                  "0963d5df-d314-48d2-9572-52d460264c79",
                  "4f4b2530-33c9-4228-ad6e-353a0025cb1c",
                  "dde56eb0-60c6-427d-8e7a-b4f5ded5e3aa",
                  "fa45e502-049c-4a0b-96d5-4c594b41e2c8",
                  "f42aadca-db22-4b42-8083-75961f29ad82"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 121,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "470a50b8-ed92-4db8-abe8-d6af05e262f8",
                "title": "The reason is an always-pending thenable",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable already-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d7d8361e-affb-4ba2-866b-028e30fa51d8",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable immediately-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "74495840-1212-4103-8db7-227731c3b695",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable eventually-fulfilled",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e38a36a-94eb-4285-885c-02f8547fb68f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fc436b81-1b7e-4e33-a13f-13c4e157e08c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7256ba25-1eef-43a7-a3f4-d8089cd5a841",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is an always-pending thenable eventually-rejected",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bbfb7e49-4256-45aa-8d22-63b9bc45e905",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "d7d8361e-affb-4ba2-866b-028e30fa51d8",
                  "74495840-1212-4103-8db7-227731c3b695",
                  "9e38a36a-94eb-4285-885c-02f8547fb68f",
                  "fc436b81-1b7e-4e33-a13f-13c4e157e08c",
                  "7256ba25-1eef-43a7-a3f4-d8089cd5a841",
                  "bbfb7e49-4256-45aa-8d22-63b9bc45e905"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 126,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "1cedfe76-21a1-4a54-bd4d-45c72b447e26",
                "title": "The reason is a fulfilled promise",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise already-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b049f2fd-07d7-472e-99ec-3aac9ccfc434",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise immediately-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f13cfcc-5ecf-4553-98f2-8afa4d38aa21",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "39888f5f-0582-409e-99f1-971e4492691c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise already-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7467a618-5ace-4609-bc5d-4d10108e6595",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise immediately-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7a7d84bb-0896-45c4-b351-178bb3449ae9",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a fulfilled promise eventually-rejected",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0c83f167-2af4-4028-8a34-3c21f7677791",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "b049f2fd-07d7-472e-99ec-3aac9ccfc434",
                  "9f13cfcc-5ecf-4553-98f2-8afa4d38aa21",
                  "39888f5f-0582-409e-99f1-971e4492691c",
                  "7467a618-5ace-4609-bc5d-4d10108e6595",
                  "7a7d84bb-0896-45c4-b351-178bb3449ae9",
                  "0c83f167-2af4-4028-8a34-3c21f7677791"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 127,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "1de7e744-1846-44a4-9b58-7753d0c33ed1",
                "title": "The reason is a rejected promise",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise already-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "41aef9c2-28e3-4b2b-8e87-d3489925d562",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise immediately-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "99b69dd5-e252-49e2-a48d-6bfac189d0ae",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "848e3516-a56a-4caf-8684-fce23fbcbcdd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46dd7cca-2d27-4f15-86f2-dfe4bf6ddd3a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise immediately-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3943c43e-6661-48d6-93de-b2aa87a09630",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.2: If either `onFulfilled` or `onRejected` throws an exception `e`, `promise2` must be rejected with `e` as the reason. The reason is a rejected promise eventually-rejected",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b08919f8-2595-4eee-a2d1-085a3fc2cd86",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "41aef9c2-28e3-4b2b-8e87-d3489925d562",
                  "99b69dd5-e252-49e2-a48d-6bfac189d0ae",
                  "848e3516-a56a-4caf-8684-fce23fbcbcdd",
                  "46dd7cca-2d27-4f15-86f2-dfe4bf6ddd3a",
                  "3943c43e-6661-48d6-93de-b2aa87a09630",
                  "b08919f8-2595-4eee-a2d1-085a3fc2cd86"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 126,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "eeaad914-fa4a-46aa-afce-8ddd0e54f84e",
            "title": "2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "12555ab8-f335-4365-a2f3-3d291edda446",
                "title": "`onFulfilled` is `undefined`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` already-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ad13b83e-d30a-48a6-bdb6-4fff5f4955b1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "35d67278-482a-46af-8ae3-e7a72a2d9ac5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `undefined` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "eb0ec6d5-145f-46ea-b9eb-4527548e4d9d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "ad13b83e-d30a-48a6-bdb6-4fff5f4955b1",
                  "35d67278-482a-46af-8ae3-e7a72a2d9ac5",
                  "eb0ec6d5-145f-46ea-b9eb-4527548e4d9d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 61,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "4d046c6c-639e-45ca-ab1f-bdd5bb8ff778",
                "title": "`onFulfilled` is `null`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` already-fulfilled",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "4d68ef33-be0e-4615-9b97-2c8afd679407",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f3583702-5689-47a3-ae0b-cd3c47f145fc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `null` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f0b814c-677b-4c72-8201-d324fba3bc38",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "4d68ef33-be0e-4615-9b97-2c8afd679407",
                  "f3583702-5689-47a3-ae0b-cd3c47f145fc",
                  "8f0b814c-677b-4c72-8201-d324fba3bc38"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 66,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "9d147b0d-5d46-4fd6-a7e1-ab50d9329661",
                "title": "`onFulfilled` is `false`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` already-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "caf7df72-43ca-4249-87f6-e17f48769ded",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2140492a-95a0-4abe-9005-ca766f73220c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `false` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "29e698ab-ad4c-4944-98b1-91529c2a4714",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "caf7df72-43ca-4249-87f6-e17f48769ded",
                  "2140492a-95a0-4abe-9005-ca766f73220c",
                  "29e698ab-ad4c-4944-98b1-91529c2a4714"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 62,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "488b96ca-4050-4ca3-9a7a-bfc06eb1f17a",
                "title": "`onFulfilled` is `5`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` already-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8c514f3a-6dd4-48f7-beb4-392e4294ea84",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` immediately-fulfilled",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0b2c095-f7ad-4167-9cfc-19beec85b9b3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is `5` eventually-fulfilled",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6a97494e-f1aa-42fa-94f5-185b446f4959",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8c514f3a-6dd4-48f7-beb4-392e4294ea84",
                  "a0b2c095-f7ad-4167-9cfc-19beec85b9b3",
                  "6a97494e-f1aa-42fa-94f5-185b446f4959"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 61,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "abfdc8eb-5480-4409-9223-68256fd7fe65",
                "title": "`onFulfilled` is an object",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object already-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "34792642-c893-485f-bb2b-fb8e55c24126",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object immediately-fulfilled",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0ed84622-1a32-4eb0-9217-b9571241e379",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an object eventually-fulfilled",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "823489b2-d23a-4a93-afb9-f25ca6e6e465",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "34792642-c893-485f-bb2b-fb8e55c24126",
                  "0ed84622-1a32-4eb0-9217-b9571241e379",
                  "823489b2-d23a-4a93-afb9-f25ca6e6e465"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 59,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "b85d1576-4374-424a-a6b7-851364664fe4",
                "title": "`onFulfilled` is an array containing a function",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function already-fulfilled",
                    "timedOut": false,
                    "duration": 43,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(resolved(value), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5741a177-3bee-4131-9126-f36a09b6755c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function immediately-fulfilled",
                    "timedOut": false,
                    "duration": 16,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7fdf8420-206e-487b-9d4d-094c2318aa63",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-fulfilled",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.3: If `onFulfilled` is not a function and `promise1` is fulfilled, `promise2` must be fulfilled with the same value. `onFulfilled` is an array containing a function eventually-fulfilled",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "35e889f8-0fc3-49bd-92ee-55bd65b8c2a5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5741a177-3bee-4131-9126-f36a09b6755c",
                  "7fdf8420-206e-487b-9d4d-094c2318aa63",
                  "35e889f8-0fc3-49bd-92ee-55bd65b8c2a5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 112,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "37dbd172-92d0-45b9-b757-29704d74622a",
            "title": "2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "f75948ca-3e6a-44ef-b391-609451d47386",
                "title": "`onRejected` is `undefined`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a739e206-094e-4c9d-8c27-48316c26cabf",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` immediately-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0773bd3e-204f-454b-ae3e-dc3cf94fdc26",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `undefined` eventually-rejected",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e4c8ea94-fcc0-48a4-8c73-65f0dc41575c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a739e206-094e-4c9d-8c27-48316c26cabf",
                  "0773bd3e-204f-454b-ae3e-dc3cf94fdc26",
                  "e4c8ea94-fcc0-48a4-8c73-65f0dc41575c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 63,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "9771c3a0-4cb4-457a-bb7f-f36195266053",
                "title": "`onRejected` is `null`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "36c62ee3-59cf-488f-abb9-9ac4017cfd7c",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "257dbe18-cc62-4758-9298-108ea386717a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `null` eventually-rejected",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b818fbe4-7159-43f8-abd4-263e09115cad",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "36c62ee3-59cf-488f-abb9-9ac4017cfd7c",
                  "257dbe18-cc62-4758-9298-108ea386717a",
                  "b818fbe4-7159-43f8-abd4-263e09115cad"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 64,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "8b2e2bbe-833b-45f3-84ac-4cbda5ef4925",
                "title": "`onRejected` is `false`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1d882116-be1f-4472-a299-bb2637f19ec0",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aaa41c68-87e3-4426-8f3a-ca95baabb1f3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `false` eventually-rejected",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8af72142-cb91-43e1-a496-dd3c3c82c14f",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1d882116-be1f-4472-a299-bb2637f19ec0",
                  "aaa41c68-87e3-4426-8f3a-ca95baabb1f3",
                  "8af72142-cb91-43e1-a496-dd3c3c82c14f"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 61,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "12896a5b-50f0-4450-8788-b1ca8ed62152",
                "title": "`onRejected` is `5`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1f43f3bf-77e9-4545-9455-3ede2c0a7269",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` immediately-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7df42695-5d20-4fd4-8219-426b5554f602",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is `5` eventually-rejected",
                    "timedOut": false,
                    "duration": 53,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e47c84a-6e2d-4110-a2dd-d94a2bd77261",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "1f43f3bf-77e9-4545-9455-3ede2c0a7269",
                  "7df42695-5d20-4fd4-8219-426b5554f602",
                  "9e47c84a-6e2d-4110-a2dd-d94a2bd77261"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 60,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "9253c26c-7ca2-4e2f-a37d-04fda91166de",
                "title": "`onRejected` is an object",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object already-rejected",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e3be8505-2ffe-44ad-bbcd-c1955427bd6f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object immediately-rejected",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "42b1a759-c519-4e35-8312-a8742957ff51",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an object eventually-rejected",
                    "timedOut": false,
                    "duration": 54,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ee719714-6dd3-4356-bf00-c217709398d6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e3be8505-2ffe-44ad-bbcd-c1955427bd6f",
                  "42b1a759-c519-4e35-8312-a8742957ff51",
                  "ee719714-6dd3-4356-bf00-c217709398d6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 60,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "86d6f174-3437-4643-a4b0-9a0a04552fad",
                "title": "`onRejected` is an array containing a function",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.2.7.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "already-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function already-rejected",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "test(rejected(reason), done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54a9407d-833b-4b1d-9211-9dc46e5a14d5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "immediately-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function immediately-rejected",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "175cd912-d05e-4633-a98f-2e530e12bd9b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "eventually-rejected",
                    "fullTitle": "2.2.7: `then` must return a promise: `promise2 = promise1.then(onFulfilled, onRejected)` 2.2.7.4: If `onRejected` is not a function and `promise1` is rejected, `promise2` must be rejected with the same reason. `onRejected` is an array containing a function eventually-rejected",
                    "timedOut": false,
                    "duration": 58,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b3b94967-4c6d-4ec8-8359-bc4ccb811635",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "54a9407d-833b-4b1d-9211-9dc46e5a14d5",
                  "175cd912-d05e-4633-a98f-2e530e12bd9b",
                  "b3b94967-4c6d-4ec8-8359-bc4ccb811635"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 66,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          }
        ],
        "passes": [
          "d54d6d1c-258f-489d-a515-b50b5029f9b2"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "16a411bf-4579-4bcf-8d7a-c05afd0a29ed",
        "title": "2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason.",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.1.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.1.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "via return from a fulfilled promise",
            "fullTitle": "2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason. via return from a fulfilled promise",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var promise = resolved(dummy).then(function () {\n    return promise;\n});\npromise.then(null, function (reason) {\n    assert(reason instanceof TypeError);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "32102bca-a99e-4c47-8ea5-e956f92a247c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "via return from a rejected promise",
            "fullTitle": "2.3.1: If `promise` and `x` refer to the same object, reject `promise` with a `TypeError' as the reason. via return from a rejected promise",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var promise = rejected(dummy).then(null, function () {\n    return promise;\n});\npromise.then(null, function (reason) {\n    assert(reason instanceof TypeError);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "83bb55c1-5f31-453e-bdd1-3b7a7e268a86",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "32102bca-a99e-4c47-8ea5-e956f92a247c",
          "83bb55c1-5f31-453e-bdd1-3b7a7e268a86"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 9,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "cd37cc1b-f53b-457d-b4e8-09db97219374",
        "title": "2.3.2: If `x` is a promise, adopt its state",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "88632a3d-6d66-4d4d-962a-a076daaba43a",
            "title": "2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "via return from a fulfilled promise",
                "fullTitle": "2.3.2: If `x` is a promise, adopt its state 2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected. via return from a fulfilled promise",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                "err": {},
                "isRoot": false,
                "uuid": "7c740d4f-27cf-4c3c-95fc-395733b15caf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "via return from a rejected promise",
                "fullTitle": "2.3.2: If `x` is a promise, adopt its state 2.3.2.1: If `x` is pending, `promise` must remain pending until `x` is fulfilled or rejected. via return from a rejected promise",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                "err": {},
                "isRoot": false,
                "uuid": "1cefb39c-601b-4bad-aacc-d9bfcbac4a81",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7c740d4f-27cf-4c3c-95fc-395733b15caf",
              "1cefb39c-601b-4bad-aacc-d9bfcbac4a81"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 202,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "dc2ea96a-75c0-4967-b2c8-64064c808b72",
            "title": "2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "a5d0c2d0-5e51-4088-a07f-892ab9c84c84",
                "title": "`x` is already-fulfilled",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is already-fulfilled via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 8,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "944d3ca1-2bcd-4548-b350-eaeaa9be6ecb",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is already-fulfilled via return from a rejected promise",
                    "timedOut": false,
                    "duration": 17,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f4bd804-9047-43b0-b6c1-10e01687aa98",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "944d3ca1-2bcd-4548-b350-eaeaa9be6ecb",
                  "9f4bd804-9047-43b0-b6c1-10e01687aa98"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 25,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "95058442-aaa3-4464-b713-a40aa60fa3bb",
                "title": "`x` is eventually-fulfilled",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is eventually-fulfilled via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 59,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fc834414-a2a7-4ab0-949a-4e7bc956d0f1",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.2: If `x` is a promise, adopt its state 2.3.2.2: If/when `x` is fulfilled, fulfill `promise` with the same value. `x` is eventually-fulfilled via return from a rejected promise",
                    "timedOut": false,
                    "duration": 56,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bfad99c9-3450-49fe-9292-090d55f5b741",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "fc834414-a2a7-4ab0-949a-4e7bc956d0f1",
                  "bfad99c9-3450-49fe-9292-090d55f5b741"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 115,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "41b67d8e-2d1f-4ddb-8130-75574fc99860",
            "title": "2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "292eb7c2-f521-4f03-b50c-ae2b1051126f",
                "title": "`x` is already-rejected",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is already-rejected via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "31168463-9c2b-40a4-8507-ebaba78b8f65",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is already-rejected via return from a rejected promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "135efaa9-2759-47c7-aee2-341ba6515207",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "31168463-9c2b-40a4-8507-ebaba78b8f65",
                  "135efaa9-2759-47c7-aee2-341ba6515207"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 9,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "7cf676f5-0645-403d-9d57-69ceb16e0841",
                "title": "`x` is eventually-rejected",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.2.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is eventually-rejected via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 55,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0b4fcd3d-6e8d-47d4-9be8-6fd32bbda255",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.2: If `x` is a promise, adopt its state 2.3.2.3: If/when `x` is rejected, reject `promise` with the same reason. `x` is eventually-rejected via return from a rejected promise",
                    "timedOut": false,
                    "duration": 57,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1a0b84c5-6886-4caf-a50f-52a21a90704c",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0b4fcd3d-6e8d-47d4-9be8-6fd32bbda255",
                  "1a0b84c5-6886-4caf-a50f-52a21a90704c"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 112,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "0bcfdc07-7dae-494a-aaed-98f2ce5eb58f",
        "title": "2.3.3: Otherwise, if `x` is an object or function,",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "a3c7d7bd-8189-4061-b447-86ec3b2d89d9",
            "title": "2.3.3.1: Let `then` be `x.then`",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "11789575-5559-4687-90b7-423572e6ed0c",
                "title": "`x` is an object with null prototype",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "numberOfTimesThenWasRetrieved = 0;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a11aa655-a212-4fcf-9db7-87200ea38ae6",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a2cc0e21-cf7e-49da-8b1f-b97baafe6f5a",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with null prototype via return from a rejected promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7b895d71-df2e-4d8f-8636-12d802d384e9",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a2cc0e21-cf7e-49da-8b1f-b97baafe6f5a",
                  "7b895d71-df2e-4d8f-8636-12d802d384e9"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 6,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "23c5db06-3962-4412-992d-2970b0f69106",
                "title": "`x` is an object with normal Object.prototype",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "numberOfTimesThenWasRetrieved = 0;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "75b0b6a6-fc8c-4526-8dea-47765868c435",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a8129d90-a322-4807-870f-c729bf812706",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is an object with normal Object.prototype via return from a rejected promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3e45542b-d6d2-44df-b5a4-5575d547bf90",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "a8129d90-a322-4807-870f-c729bf812706",
                  "3e45542b-d6d2-44df-b5a4-5575d547bf90"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 6,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "03bef6c0-a124-4b4a-84e0-ac24639c1612",
                "title": "`x` is a function",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "numberOfTimesThenWasRetrieved = 0;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7c2d6654-4d6e-4fbd-a915-5e276e55987c",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "8f117d86-1e38-49a3-bb7d-d345354d608b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.1: Let `then` be `x.then` `x` is a function via return from a rejected promise",
                    "timedOut": false,
                    "duration": 6,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1f132a2f-0be0-408d-ac89-00a94186e6f7",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "8f117d86-1e38-49a3-bb7d-d345354d608b",
                  "1f132a2f-0be0-408d-ac89-00a94186e6f7"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 10,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "a8f8e367-3289-426d-b1b0-ce0bb1428059",
            "title": "2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason.",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "07e4db14-484a-4fbe-bbe8-ecd1f45f3e1d",
                "title": "`e` is `undefined`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `undefined` via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cc10c743-8b87-4ff3-90b8-a1671789a9a4",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `undefined` via return from a rejected promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9170d914-ee10-4934-bfbd-3ae1a5aab2d6",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "cc10c743-8b87-4ff3-90b8-a1671789a9a4",
                  "9170d914-ee10-4934-bfbd-3ae1a5aab2d6"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 8,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "0adb075d-f440-42a8-b2dd-77db9de03d5c",
                "title": "`e` is `null`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `null` via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3c51ad76-147a-448a-bc02-bce2bfcb56d3",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `null` via return from a rejected promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f2e5c07-4ebf-4b10-b711-e369c85abd65",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "3c51ad76-147a-448a-bc02-bce2bfcb56d3",
                  "0f2e5c07-4ebf-4b10-b711-e369c85abd65"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 7,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "eab9afd1-9477-4725-a1b8-47a402ae86d8",
                "title": "`e` is `false`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `false` via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "023a67e2-df65-4bbd-bed9-2ab8915a9b71",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `false` via return from a rejected promise",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7244f639-9b9e-4f45-87bb-23bbef7c948a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "023a67e2-df65-4bbd-bed9-2ab8915a9b71",
                  "7244f639-9b9e-4f45-87bb-23bbef7c948a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 10,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "ef2ed6e8-4698-44e4-9da2-fa0140e45a35",
                "title": "`e` is `0`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `0` via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0f6c784a-edee-49be-acab-b24ae462b240",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is `0` via return from a rejected promise",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a451961-a297-4b96-8390-b5f2edc5c208",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0f6c784a-edee-49be-acab-b24ae462b240",
                  "5a451961-a297-4b96-8390-b5f2edc5c208"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 7,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "911fb94f-6b66-4787-a080-2e690d967943",
                "title": "`e` is an error",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15f12a35-2e58-498e-82eb-aec41032b647",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error via return from a rejected promise",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ad3b1c0a-f2bf-49a7-add7-f895b3ecc0a1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "15f12a35-2e58-498e-82eb-aec41032b647",
                  "ad3b1c0a-f2bf-49a7-add7-f895b3ecc0a1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 10,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "98319a94-8e1d-4d27-80ec-175008ef8220",
                "title": "`e` is an error without a stack",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error without a stack via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e2463aca-b353-4327-89d9-a8e1f4dfc3f6",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an error without a stack via return from a rejected promise",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b4da0b57-f0e0-4dc0-99a6-612728cb494d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "e2463aca-b353-4327-89d9-a8e1f4dfc3f6",
                  "b4da0b57-f0e0-4dc0-99a6-612728cb494d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 9,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "1624f94a-81aa-42cf-aadc-8b47327f07f5",
                "title": "`e` is a date",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a date via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0909c9c1-4f76-42a8-bfe5-505fcad9f2b5",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a date via return from a rejected promise",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c92994de-3534-41d8-9c39-ce303f17714b",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "0909c9c1-4f76-42a8-bfe5-505fcad9f2b5",
                  "c92994de-3534-41d8-9c39-ce303f17714b"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 9,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "36879b66-efda-4ea3-bf34-4207ffd3649f",
                "title": "`e` is an object",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an object via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "93da05b4-cff0-4f31-adb3-8f80e4a33abc",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an object via return from a rejected promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9e231d40-45a4-46fa-8083-935682120532",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "93da05b4-cff0-4f31-adb3-8f80e4a33abc",
                  "9e231d40-45a4-46fa-8083-935682120532"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 7,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "134a8bd8-bf67-44ad-b76f-87f0488931ba",
                "title": "`e` is an always-pending thenable",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an always-pending thenable via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "15e2af04-0083-41f8-9729-c7a7f0fb489b",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is an always-pending thenable via return from a rejected promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e5ccfcd1-02fb-4d39-bcc4-7df9995a3794",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "15e2af04-0083-41f8-9729-c7a7f0fb489b",
                  "e5ccfcd1-02fb-4d39-bcc4-7df9995a3794"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 7,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "a031f04b-a4cb-4737-af0f-1d0edd7728e3",
                "title": "`e` is a fulfilled promise",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a fulfilled promise via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "af6d5460-3563-4fff-9f92-f871e5387f93",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a fulfilled promise via return from a rejected promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ea6d9d93-4e70-4dcc-80d6-4aa03086fa0d",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "af6d5460-3563-4fff-9f92-f871e5387f93",
                  "ea6d9d93-4e70-4dcc-80d6-4aa03086fa0d"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 7,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "47c201eb-f7cd-4796-bc1f-5535242755ce",
                "title": "`e` is a rejected promise",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a rejected promise via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "552ac83b-107a-4ee0-b834-f8ae72d0e3bd",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.2: If retrieving the property `x.then` results in a thrown exception `e`, reject `promise` with `e` as the reason. `e` is a rejected promise via return from a rejected promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1322d326-72ff-4d7a-a344-72512fab98a1",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "552ac83b-107a-4ee0-b834-f8ae72d0e3bd",
                  "1322d326-72ff-4d7a-a344-72512fab98a1"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 7,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "7ca8ff8b-c689-46d4-be85-9c4d54e1e01a",
            "title": "2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise`",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "79e3eef2-29d1-4109-8246-51cc40c6263c",
                "title": "Calls with `x` as `this` and two function arguments",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Calls with `x` as `this` and two function arguments via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "71bd1269-1795-4244-a009-dbeeb43b7320",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Calls with `x` as `this` and two function arguments via return from a rejected promise",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ce9fcb14-19a6-4e9b-9541-a93f8749c7e5",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "71bd1269-1795-4244-a009-dbeeb43b7320",
                  "ce9fcb14-19a6-4e9b-9541-a93f8749c7e5"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 5,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "ab18a935-645c-4863-a231-540b3567dc74",
                "title": "Uses the original value of `then`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [
                  {
                    "title": "\"before each\" hook",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` \"before each\" hook",
                    "timedOut": false,
                    "duration": 0,
                    "pass": false,
                    "fail": false,
                    "pending": false,
                    "code": "numberOfTimesThenWasRetrieved = 0;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b7c25cc0-a8f3-4157-969f-95bbba9b4f37",
                    "isHook": true,
                    "skipped": false
                  }
                ],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "49a520e0-2555-4a02-9c19-70a4a1013a98",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` Uses the original value of `then` via return from a rejected promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5a77b323-df9a-433e-a8fc-0f95adecba17",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "49a520e0-2555-4a02-9c19-70a4a1013a98",
                  "5a77b323-df9a-433e-a8fc-0f95adecba17"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 5,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "a8eeaa58-5851-406d-b5e0-fa9847419f5e",
                "title": "2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "0f28a876-2125-4de7-8d81-19c58a58fb25",
                    "title": "`y` is not a thenable",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "23550fe4-9d0f-439f-87fb-c10f83c0693a",
                        "title": "`y` is `undefined`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "4ee1ce35-3212-4f63-aa8b-b66a88307e45",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "017b3819-a1d0-464a-b6a2-9183b053386e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e30f39d0-9253-408e-9d88-615ef004b9cb",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "017b3819-a1d0-464a-b6a2-9183b053386e",
                              "e30f39d0-9253-408e-9d88-615ef004b9cb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "9773e3cb-561d-428b-8ccf-09f907008333",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5054055b-8045-4034-9ba7-5b6457611229",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `undefined` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "2472d838-9be0-4495-8a1b-b5e01487ab19",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "5054055b-8045-4034-9ba7-5b6457611229",
                              "2472d838-9be0-4495-8a1b-b5e01487ab19"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "ff007775-3b15-47c8-a5c1-2acbf5d84ee6",
                        "title": "`y` is `null`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "06fa98b2-179e-42f4-82ac-f7235f148503",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a2f3ad13-bfcc-4876-90f3-47533dbf22ec",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7cd5f356-bfa9-4554-8ffe-40a636a7c505",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a2f3ad13-bfcc-4876-90f3-47533dbf22ec",
                              "7cd5f356-bfa9-4554-8ffe-40a636a7c505"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "14edefa4-a57f-45a0-b3eb-d3253dcb4d45",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "11030df2-9dcd-403f-8408-03067a2d6d6f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `null` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "63529edd-cfb6-4379-aaf7-c1d6205a7288",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "11030df2-9dcd-403f-8408-03067a2d6d6f",
                              "63529edd-cfb6-4379-aaf7-c1d6205a7288"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "edb31435-e2ea-45cd-b6dc-4f06055a86a9",
                        "title": "`y` is `false`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "f8dc147d-5899-4f28-9b1e-7ee2cb4a0455",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c0bc1b8f-d6f2-4fcb-b590-d17e95aa4d69",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a76e9b8e-1836-4fab-87b8-673d5f269209",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c0bc1b8f-d6f2-4fcb-b590-d17e95aa4d69",
                              "a76e9b8e-1836-4fab-87b8-673d5f269209"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "4d651daa-e43c-4189-95f4-814b7d6dcbc8",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "19c4c747-05b1-4c46-ae87-e0a7fff09211",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `false` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a4754b63-3f2e-47a3-81dd-9803d978b57f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "19c4c747-05b1-4c46-ae87-e0a7fff09211",
                              "a4754b63-3f2e-47a3-81dd-9803d978b57f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "499cbd22-350c-4af3-9212-d6a1736f4b9b",
                        "title": "`y` is `5`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "b16d800e-151d-4a30-a527-f6659262a236",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "da61bc07-c43a-43d6-8bc5-ca133a4f0055",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "173f2c46-2c71-449d-848d-e1a0d0294d08",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "da61bc07-c43a-43d6-8bc5-ca133a4f0055",
                              "173f2c46-2c71-449d-848d-e1a0d0294d08"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "fd2f02ea-d259-448e-91ca-2ddfceefce79",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0467a9a7-2d9e-41b9-a6c1-7e41324fb388",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is `5` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "012dcc92-ac31-4399-934e-b8f54d0569e6",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "0467a9a7-2d9e-41b9-a6c1-7e41324fb388",
                              "012dcc92-ac31-4399-934e-b8f54d0569e6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "dd15ed04-70be-4078-9fdf-57faf061eab3",
                        "title": "`y` is an object",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "cbdc90cf-39f9-4c08-b06a-cce0ccdbfb3d",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ca2d6f1e-e248-43e2-8856-6c4f45202a81",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3fa31ff5-3a09-4a60-abf1-4e1a3fbf5017",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ca2d6f1e-e248-43e2-8856-6c4f45202a81",
                              "3fa31ff5-3a09-4a60-abf1-4e1a3fbf5017"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "c16f2bb1-ef2f-4cda-bb21-64c223c0d76d",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "12442a01-e5c1-4377-ba0c-a1ae8615ad09",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an object `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0cfd8cad-8fe1-41b1-b339-9ac35fc03aaf",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "12442a01-e5c1-4377-ba0c-a1ae8615ad09",
                              "0cfd8cad-8fe1-41b1-b339-9ac35fc03aaf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "d03dd439-a914-485a-87c1-9f11dc7753e0",
                        "title": "`y` is an array",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "3f38915d-1617-452e-ac6e-3b83c73a6985",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "437a9688-4540-41f6-af03-af7a02868634",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7a2d7cdc-d794-446c-aeb5-d169fc4e612c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "437a9688-4540-41f6-af03-af7a02868634",
                              "7a2d7cdc-d794-446c-aeb5-d169fc4e612c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "4a1533de-7cf8-42f2-bf51-03be7bb4eabf",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b41f9429-d5a5-426a-8084-811989389fbd",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is not a thenable `y` is an array `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ebd1d2b1-9a19-401d-82fc-17475be92141",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "b41f9429-d5a5-426a-8084-811989389fbd",
                              "ebd1d2b1-9a19-401d-82fc-17475be92141"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "c4ff85c1-d437-48be-91a7-8aee1707301b",
                    "title": "`y` is a thenable",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "273ea53c-bec2-4140-8ef9-bd4759345998",
                        "title": "`y` is a synchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "a7c13842-ec53-4a30-ade6-79ac23c215a8",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "62fcd74e-b80c-40d9-a396-7ea7593ac1e5",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7d33c883-11ef-4e8a-bd5f-5797b9f297e3",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "62fcd74e-b80c-40d9-a396-7ea7593ac1e5",
                              "7d33c883-11ef-4e8a-bd5f-5797b9f297e3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "1d2b6dc6-e0ee-4726-8908-6429e59a0ecd",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3c372262-25d4-464d-bd3a-3b3d3b5c828f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a473a24e-834d-412a-8ba4-148f23e50d00",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "3c372262-25d4-464d-bd3a-3b3d3b5c828f",
                              "a473a24e-834d-412a-8ba4-148f23e50d00"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "03f44e93-9ac8-45fc-a090-1523f690a466",
                        "title": "`y` is an asynchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "70114d51-bafb-4bf7-819e-380847534fc8",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6fe7805e-500a-49c7-8ae8-acfafbb20953",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b32fdfea-efe5-4a02-a5ab-d629bf8e4db3",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6fe7805e-500a-49c7-8ae8-acfafbb20953",
                              "b32fdfea-efe5-4a02-a5ab-d629bf8e4db3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "2aa82543-abb8-485d-9f9f-98259a1a11ed",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c812e3c0-f89b-4bd7-bfca-1a8a3842d53e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0e1b5dd1-9045-4210-b4e5-d50be76ef5d3",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c812e3c0-f89b-4bd7-bfca-1a8a3842d53e",
                              "0e1b5dd1-9045-4210-b4e5-d50be76ef5d3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "7def5e29-2ebb-4ac9-ad9d-da0960c093d3",
                        "title": "`y` is a synchronously-fulfilled one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "e1cba7e8-3095-49c6-a8ab-d31fa0bfa9a4",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ac12359c-5fce-42fe-8706-17b1aa68d7f7",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "04a294fa-4362-4ed3-841d-0e8bf53b75cf",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ac12359c-5fce-42fe-8706-17b1aa68d7f7",
                              "04a294fa-4362-4ed3-841d-0e8bf53b75cf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "896a8696-43f7-41ae-8a2b-4ae1cb2a385c",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4e85dfd0-bd6a-4a04-bc62-d6312e95b3b5",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f2714393-0c74-4eaf-8731-3b1d91648812",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "4e85dfd0-bd6a-4a04-bc62-d6312e95b3b5",
                              "f2714393-0c74-4eaf-8731-3b1d91648812"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "09c90ebc-a700-4148-8856-68fd272bee2d",
                        "title": "`y` is a thenable that tries to fulfill twice",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "49f38d8c-52d6-4a4b-a79e-9f58a62fee4e",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "18770aa7-72eb-4263-828c-e65a5a92142b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4b397fdb-ab03-44ed-af08-766cdc9cb614",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "18770aa7-72eb-4263-828c-e65a5a92142b",
                              "4b397fdb-ab03-44ed-af08-766cdc9cb614"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "3da57f88-3635-4bdd-8783-2f49fd8d95ac",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "48f1f36e-4ff9-4053-b6f0-be408144df58",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e5078f21-be46-4914-9564-2f6bb5aa7667",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "48f1f36e-4ff9-4053-b6f0-be408144df58",
                              "e5078f21-be46-4914-9564-2f6bb5aa7667"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "b08fe1c2-4493-4ac1-a21f-d7684058ddd0",
                        "title": "`y` is a thenable that fulfills but then throws",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "fb35cf4a-6060-4b40-83ba-f94150757916",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "309b3195-e059-4a1d-af44-a9001ee98675",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8f754f28-97b5-4edc-9482-142bca78bd0d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "309b3195-e059-4a1d-af44-a9001ee98675",
                              "8f754f28-97b5-4edc-9482-142bca78bd0d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "0c9ccf74-50e1-4808-8aa1-9e0dc1735234",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6bd0a52a-3683-41a8-8f7a-e203b81b8cd0",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "856ee99c-af29-4f08-958b-0e5e62ac55e5",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6bd0a52a-3683-41a8-8f7a-e203b81b8cd0",
                              "856ee99c-af29-4f08-958b-0e5e62ac55e5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "3a567dc8-cecf-4d94-8d84-dea595ea2add",
                        "title": "`y` is an already-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "e6f2067c-fa9f-45c9-8340-4ae9ac4215d7",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "055956db-6fec-4c4a-9353-1f7d7eb2aaa3",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f698b079-10fa-418d-b590-ab6eed3d9e3d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "055956db-6fec-4c4a-9353-1f7d7eb2aaa3",
                              "f698b079-10fa-418d-b590-ab6eed3d9e3d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "5441b4c4-3406-4405-b655-3443d1710452",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "16ade937-7a42-4ba8-a05e-16294b117765",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ed3bb4cc-0d1e-4d31-ac07-f94a0dd5cf98",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "16ade937-7a42-4ba8-a05e-16294b117765",
                              "ed3bb4cc-0d1e-4d31-ac07-f94a0dd5cf98"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "5bb217d1-baea-44f8-bfbd-45c6e442c237",
                        "title": "`y` is an eventually-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "1204051b-7609-4c0c-b799-fcd561e89e8a",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0e7e1c54-bb1c-4390-9f72-b1aaf8d303d4",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a412c36f-7e8e-444a-9e9e-ba407a173468",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "0e7e1c54-bb1c-4390-9f72-b1aaf8d303d4",
                              "a412c36f-7e8e-444a-9e9e-ba407a173468"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "51e09ff1-10b5-4a35-b9ac-b002ca4dff7b",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "750af744-e761-45e8-a812-4438bbb81a6d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 59,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "afb795b9-e286-44ee-a436-537dfb91c557",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "750af744-e761-45e8-a812-4438bbb81a6d",
                              "afb795b9-e286-44ee-a436-537dfb91c557"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 116,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "896037e7-5552-40c8-a6cd-1a9005b95078",
                        "title": "`y` is a synchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "0657eb01-1587-4e14-926b-01afd9bbac31",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4414898f-7c85-4fac-9c16-bb9de24aa754",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "04f3a790-d325-40fe-b70b-928762594a98",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "4414898f-7c85-4fac-9c16-bb9de24aa754",
                              "04f3a790-d325-40fe-b70b-928762594a98"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "0de12e3b-3664-401a-9495-ad136411bde8",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8570bb52-f5db-40ea-b93a-2cac1bdb3c54",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "94bf8e7c-af85-48f4-9fc9-80135470eede",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "8570bb52-f5db-40ea-b93a-2cac1bdb3c54",
                              "94bf8e7c-af85-48f4-9fc9-80135470eede"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "3fabd1c6-9c9b-45be-948b-3759ba7ed029",
                        "title": "`y` is an asynchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "47f9d753-feff-42e6-9624-121d07ad81af",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "80ef5779-7aec-40e9-b351-a8a3f7b62387",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a912d552-579a-45cc-bf20-1236d154e3e3",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "80ef5779-7aec-40e9-b351-a8a3f7b62387",
                              "a912d552-579a-45cc-bf20-1236d154e3e3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "f38ff98a-82b1-493d-bf2f-ee34d5d71e21",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c8fd6992-e1ea-4f28-9d21-1f6c44fcfa01",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "94091917-6644-4b50-abb3-9d206a11160e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c8fd6992-e1ea-4f28-9d21-1f6c44fcfa01",
                              "94091917-6644-4b50-abb3-9d206a11160e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "78a989c4-7704-4561-b75c-5da96f10654d",
                        "title": "`y` is a synchronously-rejected one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "2f9c5d95-7f0a-4ffe-bac5-d4a7fe6aa136",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6c09a3b1-b471-43b4-92a7-c60450157e84",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "21e36751-bfbe-4dcc-86c6-57f7ff517497",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6c09a3b1-b471-43b4-92a7-c60450157e84",
                              "21e36751-bfbe-4dcc-86c6-57f7ff517497"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "6e53210a-6533-4d13-b16c-8d1457df2ae9",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "bc4719f5-557a-40e6-8340-383e91bf2f2f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e0e5147a-1b3d-4731-ba16-ce0781301233",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "bc4719f5-557a-40e6-8340-383e91bf2f2f",
                              "e0e5147a-1b3d-4731-ba16-ce0781301233"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "4b63fe5e-c9ec-436a-b62b-f8e9b3b4a640",
                        "title": "`y` is a thenable that immediately throws in `then`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "7b46fa62-8e16-40cb-a222-06d5fe627db2",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c7a24306-df25-4b47-bafb-032a14c389b2",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6882621d-3e85-4260-9a50-a7b4b9c0ffd9",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c7a24306-df25-4b47-bafb-032a14c389b2",
                              "6882621d-3e85-4260-9a50-a7b4b9c0ffd9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "12c506b4-6646-4670-91e2-01f533cd5181",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4125a317-d8bb-4f8e-a76b-fffb03824f52",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "851c138f-8373-43e2-bf88-c771b6b34f89",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "4125a317-d8bb-4f8e-a76b-fffb03824f52",
                              "851c138f-8373-43e2-bf88-c771b6b34f89"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "36721395-0a16-4dc7-bdbf-f0abe4bf854b",
                        "title": "`y` is an object with a throwing `then` accessor",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "198b2d34-022f-497a-b077-494500be44b5",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ef60c9f9-8beb-4895-89ad-2a61b336bbed",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c7c060d2-e947-4e2e-b7db-566d665d1a44",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ef60c9f9-8beb-4895-89ad-2a61b336bbed",
                              "c7c060d2-e947-4e2e-b7db-566d665d1a44"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "cd7dd054-0b67-4a72-94fc-b060e4239b77",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ab0c6060-ac5e-4bf1-9444-57d647412a8c",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3f4cb992-0682-4f5c-8ab5-a227061a98ed",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ab0c6060-ac5e-4bf1-9444-57d647412a8c",
                              "3f4cb992-0682-4f5c-8ab5-a227061a98ed"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "0d9b7be0-12ce-43a6-ae16-11aa2ae36de4",
                        "title": "`y` is an already-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "bdf50cf3-3a70-45a9-b1ac-d6a58f89b424",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "bd8ee8e7-a2a6-4022-8cab-19d83e22be5e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "dfbcf957-bc01-4564-94b7-7ab2d2349f59",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "bd8ee8e7-a2a6-4022-8cab-19d83e22be5e",
                              "dfbcf957-bc01-4564-94b7-7ab2d2349f59"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "7b2139a5-0433-4721-9221-57f85888b2d2",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e87120dd-2665-4be6-8cf8-3750ca641ad7",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "26f91395-63ff-4136-bb20-e52e9d550b9c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e87120dd-2665-4be6-8cf8-3750ca641ad7",
                              "26f91395-63ff-4136-bb20-e52e9d550b9c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "12cee9a8-6a4a-4a0e-a9f8-9567f0102bc8",
                        "title": "`y` is an eventually-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "efe614ad-9e3b-4330-aed3-64acc1c27a9a",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a14144b7-c3d9-4ce1-a629-6f75645c75ae",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a0e7fb9d-bf22-4ba1-8ed4-2228b65c594c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a14144b7-c3d9-4ce1-a629-6f75645c75ae",
                              "a0e7fb9d-bf22-4ba1-8ed4-2228b65c594c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 109,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "ed8f7d81-cff9-4ed3-9703-2a29919b4f3d",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3182d530-5f29-4717-a1f0-8bdc8890fa86",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable `y` is an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "987da3b4-9735-47c2-a170-8baac9fa5359",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "3182d530-5f29-4717-a1f0-8bdc8890fa86",
                              "987da3b4-9735-47c2-a170-8baac9fa5359"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "577ac838-be95-4f43-8b85-9c3fed284485",
                    "title": "`y` is a thenable for a thenable",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "c07c5b70-0207-4f67-80a6-57a884b7d37a",
                        "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "5a885500-5307-4bb3-90dc-502d183d97b3",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a2db9871-9467-4b90-b312-ecb3472e2c56",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "77a2df78-597d-4c0c-b1ab-98ee39b9745c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a2db9871-9467-4b90-b312-ecb3472e2c56",
                              "77a2df78-597d-4c0c-b1ab-98ee39b9745c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "a8a7c8a0-032e-4588-be14-28670bea6b8a",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8b80ad0e-ab86-4b4d-ab3b-8bfe85eb0966",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a14795c2-5251-4913-a1f8-6f414dcfbf6e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "8b80ad0e-ab86-4b4d-ab3b-8bfe85eb0966",
                              "a14795c2-5251-4913-a1f8-6f414dcfbf6e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "0e2d9825-7e14-4b77-9692-7f393f46f5ea",
                        "title": "`y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "1475b080-aaa1-4b55-a5a3-8dcee89b6a17",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6266c333-e6c4-4cc6-a583-253a5e69ed03",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6f97dc25-9083-4a25-98d9-90cea1183038",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6266c333-e6c4-4cc6-a583-253a5e69ed03",
                              "6f97dc25-9083-4a25-98d9-90cea1183038"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "6de38e94-d122-425d-9b83-7167b0b66984",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4e760429-4930-43aa-aa3d-6d9046420981",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "127350d7-98f7-4510-ab69-18f38434baae",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "4e760429-4930-43aa-aa3d-6d9046420981",
                              "127350d7-98f7-4510-ab69-18f38434baae"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "fe7b7115-2402-46c9-a628-74b7051d2039",
                        "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "6c505d24-2500-4f45-b5a7-8611aa5369dc",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "088b10dc-dcfc-4e80-a516-2c2e2b190ff6",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "54913a24-5560-4e51-824c-b5559df64b74",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "088b10dc-dcfc-4e80-a516-2c2e2b190ff6",
                              "54913a24-5560-4e51-824c-b5559df64b74"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "7e5c2b19-b7a2-4312-a425-38ca185def8f",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "27631fb1-87e2-4b5b-ae45-b6186c06edc6",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "52bc6a5d-678b-483b-bc8a-874c4a9c0953",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "27631fb1-87e2-4b5b-ae45-b6186c06edc6",
                              "52bc6a5d-678b-483b-bc8a-874c4a9c0953"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "21103b2a-fd32-43a2-bf38-9a683b0e4f0e",
                        "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "e220a612-00bb-4c23-9c5c-d2e7e52be9e3",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "253bb4eb-58b0-4a8d-8695-19fc66d9de23",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7bf924c6-2a60-4462-abda-b25c238097c7",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "253bb4eb-58b0-4a8d-8695-19fc66d9de23",
                              "7bf924c6-2a60-4462-abda-b25c238097c7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "60140b29-ba4e-4505-ac35-1088972adaa7",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f17adf19-3aff-4446-942b-6b61c174c0e6",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "13662d71-777f-4908-a315-c6cb4ebd85d8",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f17adf19-3aff-4446-942b-6b61c174c0e6",
                              "13662d71-777f-4908-a315-c6cb4ebd85d8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "54455929-2031-414a-a2e7-2cb5c6adc283",
                        "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "98517d9a-c097-4c6b-8e39-022dc4907294",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9d17dcbf-c935-40b0-b454-70eee2f1a700",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a6dacf64-5e02-43fa-91de-c2b201e9af9c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "9d17dcbf-c935-40b0-b454-70eee2f1a700",
                              "a6dacf64-5e02-43fa-91de-c2b201e9af9c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "d26b9e1f-12d6-4e9c-8ddf-e333238a0f61",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "150185a6-1e01-4368-8839-923306ddc77d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "20150778-58cb-40bf-919a-68c59e97f96b",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "150185a6-1e01-4368-8839-923306ddc77d",
                              "20150778-58cb-40bf-919a-68c59e97f96b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "fa27ff26-5b5c-40ce-b52a-7579f6a7c791",
                        "title": "`y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "220e9022-0d21-4a69-9d9a-fba8b57e56a7",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9156f71f-2e47-49c1-8374-0e3367e5fc79",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "eb41deaf-64fd-4c7f-8717-cf86b5ed9369",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "9156f71f-2e47-49c1-8374-0e3367e5fc79",
                              "eb41deaf-64fd-4c7f-8717-cf86b5ed9369"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "67ff6876-ba3d-435a-a92f-19df97276478",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d817f138-fd63-4f92-b307-843cde689ffd",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "029a3ba6-d8d8-4333-8bc1-c06a3590d0cd",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "d817f138-fd63-4f92-b307-843cde689ffd",
                              "029a3ba6-d8d8-4333-8bc1-c06a3590d0cd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "38350ae2-dc11-420e-b92a-6fb35f89dc82",
                        "title": "`y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "b500760e-6373-4711-9e2a-6712ef3c780b",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "fd0e827e-3638-4fbc-bd3b-faf4b3108802",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "dde81324-9d72-4d5f-ba2d-438f88f59ee1",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "fd0e827e-3638-4fbc-bd3b-faf4b3108802",
                              "dde81324-9d72-4d5f-ba2d-438f88f59ee1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 110,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "3602ef39-415a-46ba-bde8-47c0f715e5d0",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "00a20edb-0c41-4481-bdaf-9740208141d8",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "954c5653-b68c-4472-9dbd-9c13906ec363",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "00a20edb-0c41-4481-bdaf-9740208141d8",
                              "954c5653-b68c-4472-9dbd-9c13906ec363"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 112,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "280e1460-648c-4275-b063-d070dd128daa",
                        "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "1c0a19df-60bc-4caf-b522-d69b8075f68a",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "128ffde7-6bdf-4658-8182-23913211c236",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "fa27cb0b-663d-4058-96e7-22fde4609e70",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "128ffde7-6bdf-4658-8182-23913211c236",
                              "fa27cb0b-663d-4058-96e7-22fde4609e70"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "628839e7-9aca-4799-a9f6-edfa0a233903",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c99f2a45-0bac-4003-88e0-16407797402c",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c7b262a0-6f1e-4f36-8ba3-27e6b0c1ff9f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c99f2a45-0bac-4003-88e0-16407797402c",
                              "c7b262a0-6f1e-4f36-8ba3-27e6b0c1ff9f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "d6379965-cc15-4424-979b-16984892a0cc",
                        "title": "`y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "90725f85-45c5-41c8-8a1d-6452e1959e9d",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6d36f35c-5093-4e7f-8eba-b14884132e70",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8ed58697-2514-464b-818f-5dc6483c4ebf",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6d36f35c-5093-4e7f-8eba-b14884132e70",
                              "8ed58697-2514-464b-818f-5dc6483c4ebf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "658fc8e6-d24c-47d0-acf0-2a4da28a8d48",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f7075a7d-ffe2-47dc-9ad8-80140c6665c0",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4383d130-a208-4007-add2-3524351ba952",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f7075a7d-ffe2-47dc-9ad8-80140c6665c0",
                              "4383d130-a208-4007-add2-3524351ba952"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "e49d3d79-27a9-4046-867f-6f093208f56b",
                        "title": "`y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "c5282d95-ca1a-4a77-aec5-785b6bab250c",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "76ef0ed4-537a-4f6d-90af-0b3d08677423",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "606c29f8-4897-442f-958e-ec2bfcae799c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "76ef0ed4-537a-4f6d-90af-0b3d08677423",
                              "606c29f8-4897-442f-958e-ec2bfcae799c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 4,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "a9b44d3d-09f6-4ad7-8c1d-c69aa0443475",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "baa74a66-7391-4fbf-ae25-e8a028099197",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8866ff2b-22b7-46e4-9751-e7f771cdf85a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "baa74a66-7391-4fbf-ae25-e8a028099197",
                              "8866ff2b-22b7-46e4-9751-e7f771cdf85a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "bf7da7cf-82fd-40ec-af73-38352c795dcf",
                        "title": "`y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "b1050b8a-2222-4608-9d6a-85244818f738",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "86188267-0381-4646-8324-39b228ec40c4",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c9981484-e18e-4f6e-9fa2-bfef0172e3d5",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "86188267-0381-4646-8324-39b228ec40c4",
                              "c9981484-e18e-4f6e-9fa2-bfef0172e3d5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "eb82b3ae-a71a-479a-b7c8-4fca0d641338",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7fcca56d-ab0e-4c80-ad55-180634c01063",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "35ae6c61-80c9-424f-94b9-c690a17b3e7d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "7fcca56d-ab0e-4c80-ad55-180634c01063",
                              "35ae6c61-80c9-424f-94b9-c690a17b3e7d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "f8190484-ec13-4005-8408-2e5490c6c732",
                        "title": "`y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "7571c833-2b81-4b4a-b259-522d18338105",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "31b49e47-ed93-4221-9b75-d6b44e066ee7",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8d2827f8-c90e-43cd-a295-ff3d355e3fd2",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "31b49e47-ed93-4221-9b75-d6b44e066ee7",
                              "8d2827f8-c90e-43cd-a295-ff3d355e3fd2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "4ca78a50-d5c4-44a6-97fd-0c90addef707",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b61e4576-509e-4028-8418-df7c92bac2b1",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e7bb90b1-d0a0-4c6b-b5bf-1453f77a0138",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "b61e4576-509e-4028-8418-df7c92bac2b1",
                              "e7bb90b1-d0a0-4c6b-b5bf-1453f77a0138"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "dcd90fe9-5fae-451c-b503-bf9242fea201",
                        "title": "`y` is a synchronously-fulfilled custom thenable for an already-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "25db3bf5-7282-44b9-bff6-355edb65eef1",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ba3235a5-3958-4657-9d1b-e54222a9af77",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "07662c36-5ffb-4b44-82c8-807c6457ac56",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ba3235a5-3958-4657-9d1b-e54222a9af77",
                              "07662c36-5ffb-4b44-82c8-807c6457ac56"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "6fe11229-d7e7-45ca-8d4f-6790c4d5ea7f",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ea45582c-3f46-4bfc-879a-383af5e9a065",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "abbd6d20-0be4-4006-8ad5-1ee0dbaef280",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ea45582c-3f46-4bfc-879a-383af5e9a065",
                              "abbd6d20-0be4-4006-8ad5-1ee0dbaef280"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "ffc777a5-c539-49c7-95fe-b9e3d9a86cb4",
                        "title": "`y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "78f7eae0-441e-4217-8690-a42724ada74f",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "83c274d6-9553-437c-bba5-5b42a988b462",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "62629d21-57c4-4855-9b1d-37360fe4a55c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "83c274d6-9553-437c-bba5-5b42a988b462",
                              "62629d21-57c4-4855-9b1d-37360fe4a55c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 110,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "ff098008-108c-481a-97a1-1f92bca6b998",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "db9103dd-7cbf-4f47-93f4-f341c959a098",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7822936d-90cd-4e68-95fb-29bf1dadc820",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "db9103dd-7cbf-4f47-93f4-f341c959a098",
                              "7822936d-90cd-4e68-95fb-29bf1dadc820"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 113,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "a4218797-06cd-469e-8494-081a0fff99e2",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "3e1d019b-3599-458a-8902-b4e10d5b44d0",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "67092100-7cb4-4280-bc8b-148e892535be",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "986e936f-4c95-462f-9310-b1f983600afb",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "67092100-7cb4-4280-bc8b-148e892535be",
                              "986e936f-4c95-462f-9310-b1f983600afb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "48ae0396-33ba-4e1d-b202-dcd4e752b17e",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "951bf27d-5db2-4145-9f19-f6c6c2aceacc",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "49da495b-5625-43cf-a13e-ac3d1c76f368",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "951bf27d-5db2-4145-9f19-f6c6c2aceacc",
                              "49da495b-5625-43cf-a13e-ac3d1c76f368"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "c7e77189-30a3-40f8-9401-963ee53349f6",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "abc38c9d-728c-4bee-a3d3-8449b603e9b2",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b0da2e41-2f96-478f-8e58-00e098467f7e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ed05c1d1-fe63-42b4-906b-cb46d42be4c6",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "b0da2e41-2f96-478f-8e58-00e098467f7e",
                              "ed05c1d1-fe63-42b4-906b-cb46d42be4c6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "30ac1928-d64c-4980-952b-62663acb9929",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d13bd687-271d-476a-999f-ee94bd650b0c",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d3381e1c-e84e-42d0-971b-3259f96f54be",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "d13bd687-271d-476a-999f-ee94bd650b0c",
                              "d3381e1c-e84e-42d0-971b-3259f96f54be"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "831ffef3-09e1-45b7-89f8-dca6ab096f9b",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "4a3d0077-3fa3-4860-9a31-e020eb5904d6",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ef34b826-9226-4876-b922-3dbb1ad01d5a",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "df8a27c8-fa8d-40af-87f9-eaab1cedb7b5",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ef34b826-9226-4876-b922-3dbb1ad01d5a",
                              "df8a27c8-fa8d-40af-87f9-eaab1cedb7b5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "da016bcc-64fd-4a33-8607-449add4d92f5",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "553e83f3-9963-4908-97e1-75e902eb382d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7ea75a89-067c-49b3-a44c-fb43707091af",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "553e83f3-9963-4908-97e1-75e902eb382d",
                              "7ea75a89-067c-49b3-a44c-fb43707091af"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "83417a51-117c-4165-b6d6-5520ba0feae5",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "6f03e389-8858-4c02-9f39-05ebb225c971",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "96a2cea0-cf37-421a-aa03-5c8df9146ce3",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "83187ce3-e2fb-4d2f-9b48-e5dc7f05ebe2",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "96a2cea0-cf37-421a-aa03-5c8df9146ce3",
                              "83187ce3-e2fb-4d2f-9b48-e5dc7f05ebe2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "06a95aaf-7da7-4bf6-9a34-e375b90872dc",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7f49003a-6b12-4720-8920-a9960e7357f4",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ec78f7fe-287a-4eb8-b616-3ecdec058941",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "7f49003a-6b12-4720-8920-a9960e7357f4",
                              "ec78f7fe-287a-4eb8-b616-3ecdec058941"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "675aba98-1118-4612-85d7-1553e2175b63",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "3404205a-caad-4365-afc8-4a52dfa31881",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "42c54ea1-00fd-4d7e-a10f-537d0f3bc245",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "69f078c3-dda9-465d-a2a7-050196be81dc",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "42c54ea1-00fd-4d7e-a10f-537d0f3bc245",
                              "69f078c3-dda9-465d-a2a7-050196be81dc"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "045a2aa7-5301-48d5-b017-c3fedfeffff3",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a1538992-4eca-4c10-b133-12528c8f220f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "83689b12-0d4d-46c9-a538-8c21e41e74f3",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a1538992-4eca-4c10-b133-12528c8f220f",
                              "83689b12-0d4d-46c9-a538-8c21e41e74f3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "3eaffd1a-1d4f-46cf-9626-59103c567f23",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "d0fbb814-44c8-484f-9b3c-0c1adb7a5242",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8e4b305d-da66-458f-893d-09a1a8eb0b75",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "614ab15b-3d7d-45f1-8623-f805444bc4de",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "8e4b305d-da66-458f-893d-09a1a8eb0b75",
                              "614ab15b-3d7d-45f1-8623-f805444bc4de"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "3078bb62-9f39-487a-bc93-367e12e140c7",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ea2094a4-4742-460a-8c2f-0cd575c33839",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "08597ddc-f17e-48f9-89d8-75362151c706",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ea2094a4-4742-460a-8c2f-0cd575c33839",
                              "08597ddc-f17e-48f9-89d8-75362151c706"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "a19bbea7-2304-4219-95bb-d3c0ed120b8a",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "21d82b25-e67b-4a34-9c7f-b01cb72a2e1b",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f84c7233-0d50-4ab2-8faf-2237684cf5c1",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "08bd0ed6-dac7-4581-9885-eacc25f5a102",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f84c7233-0d50-4ab2-8faf-2237684cf5c1",
                              "08bd0ed6-dac7-4581-9885-eacc25f5a102"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 110,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "808f37c2-88ac-457d-bd41-6ae7aa263924",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ca9f5144-e105-4ffa-9802-cfba589656dd",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "48374f21-cb59-4668-96be-48520d491431",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ca9f5144-e105-4ffa-9802-cfba589656dd",
                              "48374f21-cb59-4668-96be-48520d491431"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "404d17c2-7087-4a97-8960-bca57fadbc38",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "a7301e97-d1f7-4e65-94f4-97954c536dea",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b1dbf5ca-5b9f-45f9-8328-f2369b3bc4f9",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d3c5f87b-e61f-4ad6-b40c-726677da4e16",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "b1dbf5ca-5b9f-45f9-8328-f2369b3bc4f9",
                              "d3c5f87b-e61f-4ad6-b40c-726677da4e16"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "7bf7ff52-cfaf-420e-9534-464e8e938e65",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "fa81882b-8817-4383-8be8-29abdc1bdfbe",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4cb590c3-e1d5-4677-a02f-19ea8df1784e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "fa81882b-8817-4383-8be8-29abdc1bdfbe",
                              "4cb590c3-e1d5-4677-a02f-19ea8df1784e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "189ae3ac-90e0-4924-bfa7-30f9df572e1c",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "a01b0d44-c4ab-4c0b-b6dc-9ad977fdea6a",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "dad77a6a-3f8e-4987-bf3b-9e82e6291e50",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5c7a0d64-eb5a-41ba-ba5b-87fc88c3dd29",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "dad77a6a-3f8e-4987-bf3b-9e82e6291e50",
                              "5c7a0d64-eb5a-41ba-ba5b-87fc88c3dd29"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "52e3bbbc-50c0-4620-a6da-29bb17941c32",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "200c98af-68aa-4615-9dd9-e25b48f9b6f1",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "02ca5a66-5f20-4d0c-aa6b-e75306efd903",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "200c98af-68aa-4615-9dd9-e25b48f9b6f1",
                              "02ca5a66-5f20-4d0c-aa6b-e75306efd903"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "4a25ee7f-879c-4208-bee4-742a1280d712",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "61613553-c3d9-44aa-8b43-874c072c9747",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6167bd78-3370-48db-ab62-f2819ada03da",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "50494fb6-4426-472c-b1e7-0b3f5744a414",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6167bd78-3370-48db-ab62-f2819ada03da",
                              "50494fb6-4426-472c-b1e7-0b3f5744a414"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "0aa5c7a9-ce2f-4cc0-a6e5-6474840f8836",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7b0c191a-5dd4-48a2-b11f-d198749a666c",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d4049379-c35e-4405-8a94-f3120deadc0c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "7b0c191a-5dd4-48a2-b11f-d198749a666c",
                              "d4049379-c35e-4405-8a94-f3120deadc0c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "248faf16-4053-4534-9f7b-c8e99ca9d166",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "325ec2d1-78f9-47b0-8a24-81e39c584594",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a5329e95-461e-4f78-afe9-b11c3bd13a43",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "00f758ca-6ec6-414f-9326-4e0bad1ae25c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a5329e95-461e-4f78-afe9-b11c3bd13a43",
                              "00f758ca-6ec6-414f-9326-4e0bad1ae25c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "5590428d-c64c-48d3-9ad7-1809dd33bdf3",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "1e890659-a615-4a7f-9575-b3aad0bad997",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "903b80a4-6c1a-4d79-8e1d-327b74ca6992",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "1e890659-a615-4a7f-9575-b3aad0bad997",
                              "903b80a4-6c1a-4d79-8e1d-327b74ca6992"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "5c8f71a4-ae87-4889-ab4a-a40f74641bb3",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "1a090e53-c9b3-44a0-82c4-ec9fce8596d6",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "968303f2-0dd7-4a4c-9a21-18d28af59590",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "1d1ecc77-8bf1-40a8-ab95-9c02d9404890",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "968303f2-0dd7-4a4c-9a21-18d28af59590",
                              "1d1ecc77-8bf1-40a8-ab95-9c02d9404890"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "4e6d66bc-92cb-4b26-9352-2ef15ea65e90",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "17a3d98a-449c-4a90-92f9-aee3f9d8811d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "518fe1c4-2232-44c5-8e3a-bc9afa19669d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "17a3d98a-449c-4a90-92f9-aee3f9d8811d",
                              "518fe1c4-2232-44c5-8e3a-bc9afa19669d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "2f8dad7b-de8a-464b-b7a7-b497b2b1e5eb",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for an already-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "b49095cd-e076-4567-abaa-d3ad19a24327",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f822a7f4-5c7a-4cce-ac73-67b59360e96f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6e06a43d-23f1-4806-9862-2263afff321b",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f822a7f4-5c7a-4cce-ac73-67b59360e96f",
                              "6e06a43d-23f1-4806-9862-2263afff321b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "b1402638-e111-4a63-823d-2a5043410f13",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f2caef41-112d-4380-8616-df92940f6919",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "afcba30d-9325-4747-9719-6d60ab2ba25e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f2caef41-112d-4380-8616-df92940f6919",
                              "afcba30d-9325-4747-9719-6d60ab2ba25e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "ad8084ce-1ca2-487b-b5bf-00542e0fd1c4",
                        "title": "`y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "6f303fe0-4ec5-47fc-8144-205002006075",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7f2b5a9d-d175-4d80-a053-ff14218ee8d2",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b95173bc-bfdd-4cf4-9d7a-6531621ff35a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "7f2b5a9d-d175-4d80-a053-ff14218ee8d2",
                              "b95173bc-bfdd-4cf4-9d7a-6531621ff35a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 111,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "88ab8998-0915-4ebb-9cba-76ea80debe1e",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "adb9f92e-59e1-4306-9754-39ea0beefe1f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an asynchronously-fulfilled custom thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 59,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4b11474d-01e5-4235-ae50-9a46788f4c53",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "adb9f92e-59e1-4306-9754-39ea0beefe1f",
                              "4b11474d-01e5-4235-ae50-9a46788f4c53"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 115,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "5da611f3-2a0a-46f6-b482-0be0442871d2",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "8b79d4a7-ba97-431b-a870-5692fceb1606",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c153543f-2869-4e66-b1e4-db4144bd5fa7",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "bf300769-dac7-465b-a3ac-26c427a127e6",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c153543f-2869-4e66-b1e4-db4144bd5fa7",
                              "bf300769-dac7-465b-a3ac-26c427a127e6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "5060044d-7c66-4940-8315-fda50108a1b7",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "bb6370b4-d304-4af5-b7be-aaa89604df34",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f87fb20a-7244-44fa-94f3-2241121f296b",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "bb6370b4-d304-4af5-b7be-aaa89604df34",
                              "f87fb20a-7244-44fa-94f3-2241121f296b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "689f884b-da37-4ccd-b386-a93d3cce0a23",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "b3ce1834-15fa-4fe2-8bf5-62ab55c7ee0f",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 11,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "75b40849-d87f-4a02-b823-349eaee29e8a",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "eb5c4499-5318-470c-8371-6554fa996ec8",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "75b40849-d87f-4a02-b823-349eaee29e8a",
                              "eb5c4499-5318-470c-8371-6554fa996ec8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "e6a4dab0-f5a9-434d-b670-d8baa8584efa",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 10,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "bf242c51-5c86-45d6-86be-51248c47ca52",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9e20fee6-15f5-44ac-9b85-9658735c4e72",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "bf242c51-5c86-45d6-86be-51248c47ca52",
                              "9e20fee6-15f5-44ac-9b85-9658735c4e72"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 18,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "e2385272-87f3-4416-b9ec-8efc454728db",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "a66d4677-23a4-479e-b340-fd24e43dba11",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "58ab9f6b-db65-4d98-a80c-d237968948ad",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "acc1719a-aee6-4ee9-996e-708e14fb6747",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "58ab9f6b-db65-4d98-a80c-d237968948ad",
                              "acc1719a-aee6-4ee9-996e-708e14fb6747"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "d67ed998-1af3-4cc9-bb70-fc6d097952d9",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7a24669f-d74e-4d37-99f6-c49dad3dfc04",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "12dd98c3-32ea-42a3-b0b7-a118e1f81097",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "7a24669f-d74e-4d37-99f6-c49dad3dfc04",
                              "12dd98c3-32ea-42a3-b0b7-a118e1f81097"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "10e94cbb-9d33-4376-bc9f-7c99b5822121",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "d968efa1-caa3-4769-99b4-268424e6c65d",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9a7c3f51-125c-43e3-94fa-5dd800f58cc4",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "798bce11-171d-4630-a169-cb4dd3725183",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "9a7c3f51-125c-43e3-94fa-5dd800f58cc4",
                              "798bce11-171d-4630-a169-cb4dd3725183"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "18c5415d-abb2-41b6-b6a7-05d233367c8e",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b132b5e6-7f9a-4a8b-be32-2f82ea4384e5",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "dd13d4d3-b9a1-4823-a446-d4821dcb840c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "b132b5e6-7f9a-4a8b-be32-2f82ea4384e5",
                              "dd13d4d3-b9a1-4823-a446-d4821dcb840c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "a32ee11e-6f86-40b2-a46f-c17edbb61022",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "ac1518a7-1cb9-4538-9309-c9c6a409fa8d",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "358356b3-f386-4141-83d9-35aa97697145",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "be54d042-e0f5-4694-bf3d-62bb48cdc971",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "358356b3-f386-4141-83d9-35aa97697145",
                              "be54d042-e0f5-4694-bf3d-62bb48cdc971"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "814eff6c-d0b6-4d73-b029-896937249f43",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "696fcccb-589d-4758-a7aa-1853c075a71b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "39a3de7b-a3c0-4102-8191-f785d94547dd",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "696fcccb-589d-4758-a7aa-1853c075a71b",
                              "39a3de7b-a3c0-4102-8191-f785d94547dd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "3ea99439-1651-4fc6-8cb9-f8aac49bf242",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "a1f5f36d-1324-43ba-864e-9c8b2001a893",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "60724cdd-aaa3-4944-9819-e48135457b8c",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "74502ba7-bd1f-4c4f-ba58-23d44cab6950",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "60724cdd-aaa3-4944-9819-e48135457b8c",
                              "74502ba7-bd1f-4c4f-ba58-23d44cab6950"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "ab284ec4-faa3-45a3-92b0-c5a473f4f319",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "81e91c98-2f43-46cd-b2d8-46279dd0c531",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c9c091ed-1fdc-43df-9246-1f52a10f67c0",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "81e91c98-2f43-46cd-b2d8-46279dd0c531",
                              "c9c091ed-1fdc-43df-9246-1f52a10f67c0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "43a1ce58-beef-4d72-9c1d-695dbdbf42b1",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "4949f265-c0b3-472e-9c9e-8bae62a5d204",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 53,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "1140a812-0bac-4ba0-bb17-72758ab35b7e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5935b069-a77f-4a45-81a1-3f6c5d4bfd29",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "1140a812-0bac-4ba0-bb17-72758ab35b7e",
                              "5935b069-a77f-4a45-81a1-3f6c5d4bfd29"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 107,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "23c396ed-9188-47ce-9bc4-fdebd7327bc5",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3208249f-5eb0-4f3e-8bc5-05726506d26f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a73704d6-18e3-45a2-a75e-32ebf4613187",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "3208249f-5eb0-4f3e-8bc5-05726506d26f",
                              "a73704d6-18e3-45a2-a75e-32ebf4613187"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 116,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "ec736a4c-f0a4-4d47-9564-86a3be380a84",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "8082970f-2ce1-4712-bb1c-5de5201ac5d3",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "efc9a451-9196-42b1-9b6a-3ce26a280228",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b06336e2-1c0c-4960-b373-4bd04b64ea13",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "efc9a451-9196-42b1-9b6a-3ce26a280228",
                              "b06336e2-1c0c-4960-b373-4bd04b64ea13"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "5fe1caf4-528a-4c48-9ad1-71c44ee7f9ff",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "1c268339-11ff-487b-ae53-042511639cd3",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b2543bb2-5e62-4a95-a23f-7f4ecf381428",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "1c268339-11ff-487b-ae53-042511639cd3",
                              "b2543bb2-5e62-4a95-a23f-7f4ecf381428"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "de6bc611-179a-45d0-a21e-e0110da498b5",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "07b4b12a-7a37-439f-8184-3e123c44c567",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7354c699-408d-4cec-8ad7-3882d6272fa3",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9b65045e-5fef-445c-bcd2-6c4747fba24d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "7354c699-408d-4cec-8ad7-3882d6272fa3",
                              "9b65045e-5fef-445c-bcd2-6c4747fba24d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "77c02035-6f47-40ac-a7c3-c95f79bb850b",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "844e456e-f65f-4e8e-8bc7-25274eafddb1",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "069d87fc-823d-4dae-9c84-709f45581b34",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "844e456e-f65f-4e8e-8bc7-25274eafddb1",
                              "069d87fc-823d-4dae-9c84-709f45581b34"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "ed7f3d5b-3a0a-411c-aad2-0dd480e9e39e",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "023d8260-5b0c-446c-8fbf-0d9c69a5010f",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "bf85da44-d332-4cc3-ba87-936282a71764",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "32ff24ac-67cc-4b0a-8a14-b8c0a79d84a6",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "bf85da44-d332-4cc3-ba87-936282a71764",
                              "32ff24ac-67cc-4b0a-8a14-b8c0a79d84a6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "b0bb9aa5-df6d-44bc-94c0-1a4dcdc80fe2",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9e365482-4c5c-478b-ad88-869507bcee7b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "00ea59f3-1c5e-4592-8163-d47c02c795ff",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "9e365482-4c5c-478b-ad88-869507bcee7b",
                              "00ea59f3-1c5e-4592-8163-d47c02c795ff"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "c7791d5c-db7a-4835-80df-891659e6457f",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "cfc0d6d5-9019-4c6e-9af4-161b116fd744",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "125dd7b8-a918-4865-b3f7-8750519e0d52",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d0ed8f90-4eab-46d1-bc04-33ccc3beb486",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "125dd7b8-a918-4865-b3f7-8750519e0d52",
                              "d0ed8f90-4eab-46d1-bc04-33ccc3beb486"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "e8fd14e8-716b-4a30-a9e7-8a4a412818a5",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "bc11888b-a7f0-40a5-b4ae-130c14e23759",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "86e605bc-1402-49df-987b-8a55abb2354e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "bc11888b-a7f0-40a5-b4ae-130c14e23759",
                              "86e605bc-1402-49df-987b-8a55abb2354e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "ec1d8641-d553-4c4c-8aef-70d90ff932e4",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "4b34c0b1-c805-40db-aacd-19cc5db88fbd",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "03919faa-f1d9-430f-98f2-7314304e2973",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "2ddec1dd-ac51-4be2-b87d-25d64f932193",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "03919faa-f1d9-430f-98f2-7314304e2973",
                              "2ddec1dd-ac51-4be2-b87d-25d64f932193"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "4c3f078c-12a8-4f0d-93a6-c637320f5650",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "151ec18c-2e8c-4d47-9b96-1449a659db7f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4fcc792c-7642-4629-8f28-1e9922590636",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "151ec18c-2e8c-4d47-9b96-1449a659db7f",
                              "4fcc792c-7642-4629-8f28-1e9922590636"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "64e49477-b925-4b9d-831c-2105bfd4111c",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for an already-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "01ab16af-9eba-4289-8a53-f6fb7505890c",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7b710f54-53d8-42de-878a-9f01280f748e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e3cc8e89-0d84-483c-9e60-d0435e2c5b1f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "7b710f54-53d8-42de-878a-9f01280f748e",
                              "e3cc8e89-0d84-483c-9e60-d0435e2c5b1f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "4884e1bd-4775-4d55-9d76-3d4238e7e4e7",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4151dc00-951b-47e7-ab41-6684cb66e8a1",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a3b0056a-b6e2-4a99-814f-4fd9b7246ddd",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "4151dc00-951b-47e7-ab41-6684cb66e8a1",
                              "a3b0056a-b6e2-4a99-814f-4fd9b7246ddd"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "21813b11-f2f8-4c45-9c10-250f8489129e",
                        "title": "`y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "4beca8c2-de7b-4d86-8eb3-a03f883587c5",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "39dde156-b89d-4640-b8eb-fd2c3f740f97",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6f45941a-871c-4a36-acef-7d16ae23b8e2",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "39dde156-b89d-4640-b8eb-fd2c3f740f97",
                              "6f45941a-871c-4a36-acef-7d16ae23b8e2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 109,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "5a58741d-d546-4b32-ab1d-63a490a5a4c6",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "77491da4-34fe-4db4-97a9-d74027272556",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a synchronously-fulfilled one-time thenable for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "37da23a7-6d1b-4f53-bc9f-93b9fdd61e14",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "77491da4-34fe-4db4-97a9-d74027272556",
                              "37da23a7-6d1b-4f53-bc9f-93b9fdd61e14"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "961aac40-2062-40de-862a-dbf305b0a1ee",
                        "title": "`y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "46b1ca85-04e9-49c0-a4df-1971eef372c9",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5c10f490-838f-4ae3-9710-34b8a6ec98ea",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0ea00b87-3658-4041-95ac-97f4cf119def",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "5c10f490-838f-4ae3-9710-34b8a6ec98ea",
                              "0ea00b87-3658-4041-95ac-97f4cf119def"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "53eaf8f0-3da6-432a-8dd7-730025217ce0",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "063065a7-c9dc-46f5-aeb2-acead0d7a14f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3e10221a-805c-4329-ae17-f8c7551a7be1",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "063065a7-c9dc-46f5-aeb2-acead0d7a14f",
                              "3e10221a-805c-4329-ae17-f8c7551a7be1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "eeda5c7b-29f4-471a-9612-da74b59731ef",
                        "title": "`y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "d3d580d1-6412-4653-b881-dcdfe92f3e80",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "909fcf7a-f8e3-4fca-bbcf-a90cfaef204e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d187e220-110e-4b23-a119-78af2992d101",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "909fcf7a-f8e3-4fca-bbcf-a90cfaef204e",
                              "d187e220-110e-4b23-a119-78af2992d101"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "8a08f613-5171-4619-a116-b2bbbf75ddf9",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d6d0695d-8839-4f52-acbb-4b5e71a5b594",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f92b93ae-ed45-453d-8846-1160c73f6b5e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "d6d0695d-8839-4f52-acbb-4b5e71a5b594",
                              "f92b93ae-ed45-453d-8846-1160c73f6b5e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "a4b77d20-7615-419f-8207-dd3f46c48317",
                        "title": "`y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "138626f4-df9a-47a4-b77b-b86586f8bc57",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a4405806-c6d2-473f-a320-e73da5604a15",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e734d414-84d8-4f44-99a2-cc3b0c41d567",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a4405806-c6d2-473f-a320-e73da5604a15",
                              "e734d414-84d8-4f44-99a2-cc3b0c41d567"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "b0795d23-7a29-4414-b93b-4a9cc1999874",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e5f975c4-62e1-4bf3-ae42-35fb364c17ce",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f8944fa6-bf9e-46c6-aa3c-a94c7f5a7f83",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e5f975c4-62e1-4bf3-ae42-35fb364c17ce",
                              "f8944fa6-bf9e-46c6-aa3c-a94c7f5a7f83"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "fd5b2cc0-d283-4380-91ad-0d8806cde1bc",
                        "title": "`y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "ea77a4a1-eb28-4680-85f4-71ae17f69b66",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "01b0f4bb-929c-47a6-bc2b-7c9a36f2a861",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7b1f1990-ff34-47f2-b6fe-6d5d608134c7",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "01b0f4bb-929c-47a6-bc2b-7c9a36f2a861",
                              "7b1f1990-ff34-47f2-b6fe-6d5d608134c7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "03587061-1ad3-4613-89d1-0e13e8aab349",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e9190be4-7167-4811-bd48-703d2a430398",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "fa431e28-4c77-4007-85eb-54a2b74ecd80",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e9190be4-7167-4811-bd48-703d2a430398",
                              "fa431e28-4c77-4007-85eb-54a2b74ecd80"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "4064b14f-39a0-4b25-b4bd-87d840426f12",
                        "title": "`y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "4292c822-e926-4557-a281-61ca20199e9f",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8e17ab83-b9e1-41cf-bc95-bc1ed10fd3b0",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "901744a0-d524-42ab-bbea-c9bdb7e6f6a4",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "8e17ab83-b9e1-41cf-bc95-bc1ed10fd3b0",
                              "901744a0-d524-42ab-bbea-c9bdb7e6f6a4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "0d98c2dd-d1ba-4d14-beec-8192adeefe53",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "16f17033-bc00-4883-805f-ad6c53a65d4d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f1f62d90-8c96-492f-9586-b3fb747df56b",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "16f17033-bc00-4883-805f-ad6c53a65d4d",
                              "f1f62d90-8c96-492f-9586-b3fb747df56b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "d13abd9c-7e49-4ab0-ac47-bd8025adbc8e",
                        "title": "`y` is a thenable that tries to fulfill twice for an already-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "3f1d927c-bc74-4b98-a739-fd981f0f16bc",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "dfd8cc92-0345-41c4-b38a-701275f4ec32",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4ea24c3d-25f0-464a-9d62-eadc441cc021",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "dfd8cc92-0345-41c4-b38a-701275f4ec32",
                              "4ea24c3d-25f0-464a-9d62-eadc441cc021"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "cca27f1a-a711-4558-b109-ea33e27c33b8",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 10,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "fb9cb404-254a-4f02-a7f2-9a247668f20b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 10,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "170e4e2a-2cad-483f-aedf-bcfa23594ff5",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "fb9cb404-254a-4f02-a7f2-9a247668f20b",
                              "170e4e2a-2cad-483f-aedf-bcfa23594ff5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 20,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "989e9453-53fe-462c-b36a-16efee0a70bf",
                        "title": "`y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "4415cbc4-b2c0-4531-b1d0-3115ae7c123e",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d7b90a91-65d5-4824-b05c-2e0c95c6e652",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "dd26df6f-6eae-4448-93b7-a757a327cb5e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "d7b90a91-65d5-4824-b05c-2e0c95c6e652",
                              "dd26df6f-6eae-4448-93b7-a757a327cb5e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 113,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "8574f286-a6b3-4c05-8f6b-03afee6b4b9a",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "268cac00-501a-455b-b0d7-ff4509fd955b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7ee6c779-c6d9-440c-b234-aeb2ecfbb6f5",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "268cac00-501a-455b-b0d7-ff4509fd955b",
                              "7ee6c779-c6d9-440c-b234-aeb2ecfbb6f5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 115,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "e2f6be45-7753-4944-b587-d203368cb015",
                        "title": "`y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "ffcb6467-2677-4df0-8d51-254260e1b4f0",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "934f68a4-23ab-46d4-bdc1-00a5d01d4b90",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4ced9b1f-edf0-4d15-9be7-1c3f67074559",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "934f68a4-23ab-46d4-bdc1-00a5d01d4b90",
                              "4ced9b1f-edf0-4d15-9be7-1c3f67074559"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "4c36304d-6a3a-49e5-9179-3fe3404d1cae",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "064e7ee4-7b2a-45a7-bdd4-d5639a027f4b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d915ba1f-08b8-4d2b-98ee-8c5880099d1a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "064e7ee4-7b2a-45a7-bdd4-d5639a027f4b",
                              "d915ba1f-08b8-4d2b-98ee-8c5880099d1a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "1829d2ce-6081-4cd4-986f-eeb78b62b483",
                        "title": "`y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "952c093b-fa77-46fc-8b74-17b764c004c5",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "bda1d0bb-7672-4b71-b218-12630ce05d16",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "07e9d00e-9162-4395-890c-ea1b390779e6",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "bda1d0bb-7672-4b71-b218-12630ce05d16",
                              "07e9d00e-9162-4395-890c-ea1b390779e6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "c0c749c0-2097-4c49-88f7-8acaf25be703",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 11,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "11db08e9-7683-49d9-ba1b-e3768db4eefc",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e98f88c3-a60c-40ed-9f4a-d895ecac3fd3",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "11db08e9-7683-49d9-ba1b-e3768db4eefc",
                              "e98f88c3-a60c-40ed-9f4a-d895ecac3fd3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "23c8e3ff-a562-4fa1-86ac-2204046e1472",
                        "title": "`y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "d4c39e3b-d309-4b45-8a35-3ae0585840c0",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "18eebfa3-72ab-4225-a690-b3f69370fd73",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "75904cb0-27c5-47bb-ab1c-d46d219b7b8b",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "18eebfa3-72ab-4225-a690-b3f69370fd73",
                              "75904cb0-27c5-47bb-ab1c-d46d219b7b8b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "351f8477-1d4e-4e99-8e11-dd455d483a45",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "23e7662f-3e1d-4caa-a573-8dce65e068c6",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "74f1e67f-3e36-42ad-81e2-669cbebc3730",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "23e7662f-3e1d-4caa-a573-8dce65e068c6",
                              "74f1e67f-3e36-42ad-81e2-669cbebc3730"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "ede65ba4-314a-4a64-8f67-b0e9987a6b5c",
                        "title": "`y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "2549e014-9a11-4043-82d8-e57d0534cc9d",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "92d961c7-e3f2-4ba9-9e74-88bc613a8e72",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "425c07cb-8f09-4b6e-9a41-b0da4c43da52",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "92d961c7-e3f2-4ba9-9e74-88bc613a8e72",
                              "425c07cb-8f09-4b6e-9a41-b0da4c43da52"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "2c7d05d2-66bd-49a3-984a-6af3e9fd0c08",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "2d2a09a2-4fd6-4541-961a-24dc8fecbffb",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "19c1271b-a6f6-4310-a53c-cd37eb3c0a5b",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "2d2a09a2-4fd6-4541-961a-24dc8fecbffb",
                              "19c1271b-a6f6-4310-a53c-cd37eb3c0a5b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "bdb20196-7a2e-4d51-acae-7b2fb458c673",
                        "title": "`y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "57625a73-fd08-4076-b48c-dfef91501b9e",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "85d1c936-0f0d-49ac-8eaa-80b7e0223dec",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 2,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "be633ef9-cc8f-4d50-b72f-f04c70865d50",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "85d1c936-0f0d-49ac-8eaa-80b7e0223dec",
                              "be633ef9-cc8f-4d50-b72f-f04c70865d50"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 5,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "21d5d7fe-4f2a-49b0-988f-e9696be06a4a",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f1396f17-7907-4085-88f9-22e4c020b5bc",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "20e38096-b31a-4cc9-bc23-551709e5e639",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f1396f17-7907-4085-88f9-22e4c020b5bc",
                              "20e38096-b31a-4cc9-bc23-551709e5e639"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "f24d1975-21b5-4632-ac72-dc749f0cb1cf",
                        "title": "`y` is a thenable that tries to fulfill twice for an already-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "e3106145-4ed4-4eb8-b30c-f53ad73cf88e",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "adddab78-9eb5-408d-ab22-0ffa4784db78",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "790bdf61-fe15-457d-b2c3-0179813b2c27",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "adddab78-9eb5-408d-ab22-0ffa4784db78",
                              "790bdf61-fe15-457d-b2c3-0179813b2c27"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "70baf982-e9dc-4013-b728-0a563d022e5d",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e42cb225-088d-455c-a735-c25aee79f91a",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3a669ba9-0d9f-4955-82f1-7a9ef9be966c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e42cb225-088d-455c-a735-c25aee79f91a",
                              "3a669ba9-0d9f-4955-82f1-7a9ef9be966c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "4741fd2c-a255-4a48-b4b2-4fc4dd80d26d",
                        "title": "`y` is a thenable that tries to fulfill twice for an eventually-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "ba24f6d2-276b-412b-90e0-ca18676635d2",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "022da69e-388b-437c-8bff-d1435651b4f2",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d9d851b3-cebc-4bef-8173-cfa83cc283ef",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "022da69e-388b-437c-8bff-d1435651b4f2",
                              "d9d851b3-cebc-4bef-8173-cfa83cc283ef"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 111,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "945318db-3401-4fe3-9ef0-7596b7aa6f01",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7aeb04b3-e633-4b7d-bf3e-37bd4dd9df7a",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that tries to fulfill twice for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "edacafaf-cd05-40d5-afa9-05f9a2f09d21",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "7aeb04b3-e633-4b7d-bf3e-37bd4dd9df7a",
                              "edacafaf-cd05-40d5-afa9-05f9a2f09d21"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 115,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "5f618ea9-012f-485b-a659-cc4691cfb9c7",
                        "title": "`y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "db992af1-fad1-4044-b308-32432d93f3e5",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 17,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "16dda376-a284-4048-ae00-854656e9a59e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "10e119b2-60b5-4279-8606-7b1ff9d57883",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "16dda376-a284-4048-ae00-854656e9a59e",
                              "10e119b2-60b5-4279-8606-7b1ff9d57883"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 21,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "7090135c-6ab2-4281-8fbd-83f844a853f6",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3ba27c17-0270-4ee6-9551-bffdc9d9c713",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "2bf1a1f1-4aa4-4f39-ab80-f5b3a3179faf",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "3ba27c17-0270-4ee6-9551-bffdc9d9c713",
                              "2bf1a1f1-4aa4-4f39-ab80-f5b3a3179faf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "f9e7537a-f0a9-4466-b486-d30a1c69b7a8",
                        "title": "`y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "0beb816e-8f98-44d2-a143-15091aa7c25d",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "535d4431-647d-4247-a4e1-561ee1af6e9d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 10,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "75d39eba-2a89-4e2c-bccb-ee7353ea58cf",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "535d4431-647d-4247-a4e1-561ee1af6e9d",
                              "75d39eba-2a89-4e2c-bccb-ee7353ea58cf"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "9206df5f-378e-49ab-b70f-3b574acc9fc2",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7f147dfc-26ff-498e-901c-1197f7f0bcea",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4b398903-4878-4703-b24e-1bdbf0e5107b",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "7f147dfc-26ff-498e-901c-1197f7f0bcea",
                              "4b398903-4878-4703-b24e-1bdbf0e5107b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "6fbfedfc-309e-46b0-a5ec-b110102bff7f",
                        "title": "`y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "5595f068-423d-4dda-ac28-3431cbe3e1ea",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "64c5d86f-23bb-4847-a1b8-fac4bafc4766",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ae6a9376-3ab5-4d93-9464-1f5aba4a8931",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "64c5d86f-23bb-4847-a1b8-fac4bafc4766",
                              "ae6a9376-3ab5-4d93-9464-1f5aba4a8931"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "b379ce76-f8a5-404c-b9e2-c9daf98b6dcf",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ed3989f1-b34f-452e-9c2f-ae4c55354605",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9628784d-2407-4f54-b6d7-7ec1c0028580",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ed3989f1-b34f-452e-9c2f-ae4c55354605",
                              "9628784d-2407-4f54-b6d7-7ec1c0028580"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "84af3dbb-7776-4955-a1cb-9208db57a04b",
                        "title": "`y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "0d2ba689-dec8-4551-b05e-79ad663fae45",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b0574636-6f7a-41fe-978f-2dc1da649d77",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "69749699-f677-4996-b4c2-5857eaab5c95",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "b0574636-6f7a-41fe-978f-2dc1da649d77",
                              "69749699-f677-4996-b4c2-5857eaab5c95"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 8,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "e811ce12-24b3-43f5-8487-2697a5836907",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "68a54eb0-93aa-474d-ae6a-25eb84954bf4",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "fbe8641c-eafc-4d4b-9d81-e17209d5c5b7",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "68a54eb0-93aa-474d-ae6a-25eb84954bf4",
                              "fbe8641c-eafc-4d4b-9d81-e17209d5c5b7"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "f3d2f63a-9caa-45c9-b1d2-52ed7e455cd3",
                        "title": "`y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "51e3a069-c2da-4fe1-bdba-d6c290d63646",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ef8f6b3f-805c-4eb3-84f7-1d3de3e6ab11",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f0638105-fdd4-4fc6-8341-290f2af5a23d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ef8f6b3f-805c-4eb3-84f7-1d3de3e6ab11",
                              "f0638105-fdd4-4fc6-8341-290f2af5a23d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 6,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "279a755c-0e71-407e-9cd7-67d3ee21d4ec",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ecac312a-d585-44b9-a456-5c197695b330",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8ede5e49-008e-4b33-9671-64fb45e90ec4",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ecac312a-d585-44b9-a456-5c197695b330",
                              "8ede5e49-008e-4b33-9671-64fb45e90ec4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "8d68f1f6-048b-4c4f-9167-5fd32c46f553",
                        "title": "`y` is a thenable that fulfills but then throws for an already-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "e5afcfa7-fe6a-49b1-bd4d-8c7282b8a950",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "bf122b08-b648-420c-8433-ffc94e75a6dd",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "55628a44-eb99-4ec2-abe9-11214c8c89a6",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "bf122b08-b648-420c-8433-ffc94e75a6dd",
                              "55628a44-eb99-4ec2-abe9-11214c8c89a6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "545f2ba7-cf28-442e-8189-9714e85e6365",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "1ea6fb0c-471d-47cd-a874-f4a63d5203c3",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "711c5b1b-9235-4dd5-b996-650e80092a97",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "1ea6fb0c-471d-47cd-a874-f4a63d5203c3",
                              "711c5b1b-9235-4dd5-b996-650e80092a97"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "7ede8508-03f4-4fab-9fff-2f487dddc484",
                        "title": "`y` is a thenable that fulfills but then throws for an eventually-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "513e46c8-dac7-4378-a69e-012274558296",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f9d39068-1343-43be-956a-3a2fbb72a6b1",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "964d2155-6933-44a2-bda7-d24e39aac47d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f9d39068-1343-43be-956a-3a2fbb72a6b1",
                              "964d2155-6933-44a2-bda7-d24e39aac47d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 110,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "a44760bf-e763-4ce9-90f7-3bd1f1b418aa",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "edd62887-264a-49e3-abe5-8137fb470dd3",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a69a0f4a-bf20-40f4-af27-19a0c6d759a6",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "edd62887-264a-49e3-abe5-8137fb470dd3",
                              "a69a0f4a-bf20-40f4-af27-19a0c6d759a6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 115,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "81e95f97-c7de-42ac-816f-22472445f3a8",
                        "title": "`y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "b5dd322b-7f9e-427e-a239-0a5f2c5eca95",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4dcd1890-4448-4b7f-b22c-189f4ff8afaf",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "942d0f3a-19ef-4704-aec8-982c738b5367",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "4dcd1890-4448-4b7f-b22c-189f4ff8afaf",
                              "942d0f3a-19ef-4704-aec8-982c738b5367"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "40a9264e-860b-4fdf-b27d-d7d3db52e267",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "67b5f1cc-091f-4447-aeac-c3e02eb655d3",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "988d7ce6-53a8-464f-aa8d-dbcebeacbe10",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "67b5f1cc-091f-4447-aeac-c3e02eb655d3",
                              "988d7ce6-53a8-464f-aa8d-dbcebeacbe10"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "08048850-3355-4931-97f2-30d25a8b41bb",
                        "title": "`y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "8acdd55d-08ee-4e31-9402-c6ff299cffe2",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4d509752-e8f6-4640-a0c7-c61fe9cdd475",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "664b2acb-f377-4c57-b061-27b438a06c1b",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "4d509752-e8f6-4640-a0c7-c61fe9cdd475",
                              "664b2acb-f377-4c57-b061-27b438a06c1b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "319b4856-d410-4944-855a-21495ffced7f",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6a5bcad2-bb2a-4e43-80e5-0448628cbd4a",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "47dbce1b-d816-423d-8ca3-26f2194d8fab",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6a5bcad2-bb2a-4e43-80e5-0448628cbd4a",
                              "47dbce1b-d816-423d-8ca3-26f2194d8fab"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "498e9d34-e263-480e-9882-91bfd55cd8ef",
                        "title": "`y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "ce40cc17-f4fb-4b93-b846-a6a51bf2017f",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "74045852-5987-49e1-8f10-1bee5263c3fb",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c84adad3-6b11-4517-a7cb-4515b56e2bbe",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "74045852-5987-49e1-8f10-1bee5263c3fb",
                              "c84adad3-6b11-4517-a7cb-4515b56e2bbe"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "ccf948be-7b1b-4a29-a980-1b54f3a6e67b",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "1e0fba3c-28a6-4a72-8f29-c8f5abb5d720",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e527b983-3d0b-4f7d-afbc-7258c9e56242",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "1e0fba3c-28a6-4a72-8f29-c8f5abb5d720",
                              "e527b983-3d0b-4f7d-afbc-7258c9e56242"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "4e10f70a-eb5d-446a-b120-430ab660611a",
                        "title": "`y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "57e968da-ab7b-45d3-91b5-0be52a7d9fb3",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 3,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "38964ee4-7e0e-4a40-9933-fe8b12ca940b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "eee944a9-ce4d-413f-804f-909b90c65ee6",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "38964ee4-7e0e-4a40-9933-fe8b12ca940b",
                              "eee944a9-ce4d-413f-804f-909b90c65ee6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 7,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "01e23b0e-68c8-4e85-84d8-bd8ab07dd47b",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4f9dbe79-d840-4356-8517-a2f66080204f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "19979c65-90af-4ef6-99a7-a523b86f4e15",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "4f9dbe79-d840-4356-8517-a2f66080204f",
                              "19979c65-90af-4ef6-99a7-a523b86f4e15"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "2070d9d7-c412-483d-a909-fe41a923da84",
                        "title": "`y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "97c6ecdd-acc4-4bf0-9c10-0a6ea3e47d00",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6a7b6959-ca23-477a-91bf-7b3d81b141f5",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "aaf6d8e0-4abe-492c-9aa3-e0ae23c35896",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6a7b6959-ca23-477a-91bf-7b3d81b141f5",
                              "aaf6d8e0-4abe-492c-9aa3-e0ae23c35896"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "6ca29806-653c-48c1-8fd5-b728a5c874d2",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "66d8094b-41c4-4ac4-bdf8-55ae1a53b8ee",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6e8e723e-cbbc-4a5b-9dc1-ea0a1ffa523e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "66d8094b-41c4-4ac4-bdf8-55ae1a53b8ee",
                              "6e8e723e-cbbc-4a5b-9dc1-ea0a1ffa523e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "ec96adfc-5e16-481c-96b4-a0d5efac8898",
                        "title": "`y` is a thenable that fulfills but then throws for an already-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "e7fc859c-1013-458a-8312-4bd98d27f3b1",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "39703786-d62e-48c9-8868-2abf26f72abc",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "470d87fc-d0e1-496d-bdcb-7c5877c126a2",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "39703786-d62e-48c9-8868-2abf26f72abc",
                              "470d87fc-d0e1-496d-bdcb-7c5877c126a2"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "dba0e7eb-d3c4-449c-8bfd-b4440d70e6d7",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8ce86ac5-37f7-44e0-8a83-1d85bcac1497",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c0b29921-c19a-4309-9f72-b3246a84bd5b",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "8ce86ac5-37f7-44e0-8a83-1d85bcac1497",
                              "c0b29921-c19a-4309-9f72-b3246a84bd5b"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "620870d6-beea-473d-a78c-5909f046bbfe",
                        "title": "`y` is a thenable that fulfills but then throws for an eventually-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "54a8fc60-4a28-43ff-9842-bce185f69dd5",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ccd62657-a622-47fb-82f3-0df5343a3464",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "748217c0-5e17-4d7f-b5ec-3a4da315f24d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ccd62657-a622-47fb-82f3-0df5343a3464",
                              "748217c0-5e17-4d7f-b5ec-3a4da315f24d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 109,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "cada794c-5acd-462b-96a8-35521d37324f",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "bf0f9dd9-372f-408a-8b1c-6478a3671972",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is a thenable that fulfills but then throws for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "414f5ab9-5b33-41ca-9764-b6e511449c75",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "bf0f9dd9-372f-408a-8b1c-6478a3671972",
                              "414f5ab9-5b33-41ca-9764-b6e511449c75"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 111,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "d5a2c3c6-29cd-4b91-b05f-fd36a1a13cda",
                        "title": "`y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "0b511e83-a8b2-420c-9cc4-c843d2858c72",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3ac1965d-b08f-497e-baff-eafe62538960",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "beedbbf2-3aea-44dc-81ab-f5bba102996e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "3ac1965d-b08f-497e-baff-eafe62538960",
                              "beedbbf2-3aea-44dc-81ab-f5bba102996e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "231d5af3-15b7-4332-b517-7032b90d3da7",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6b6ef0da-c781-4d7a-a88e-0692846d8cfd",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d0c57d18-ccb4-4506-82c6-dfbba9ce2f1a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6b6ef0da-c781-4d7a-a88e-0692846d8cfd",
                              "d0c57d18-ccb4-4506-82c6-dfbba9ce2f1a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "c0452b95-a721-495d-895b-7529a87a6b7a",
                        "title": "`y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "5d574120-c9ae-49ad-a64d-65f44711c96c",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "10afa1b8-f99c-4221-b2a2-1baab0315e15",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5ac9ad91-bb76-43ce-ad2b-9e0788ed5e4f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "10afa1b8-f99c-4221-b2a2-1baab0315e15",
                              "5ac9ad91-bb76-43ce-ad2b-9e0788ed5e4f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "4104d972-8de9-4343-af29-a577fa199869",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "158129e8-d859-4b6a-b3d5-e402ff18512e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "857dc1ff-b8cf-48f0-a936-7f82406ffd2a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "158129e8-d859-4b6a-b3d5-e402ff18512e",
                              "857dc1ff-b8cf-48f0-a936-7f82406ffd2a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "334cf96d-f42d-4379-854c-e06d76b03457",
                        "title": "`y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "f95d7e3c-4294-42bd-bc9d-d2692877ead0",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "91c466a5-a1c0-4dfb-beb7-b97926f1defe",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b4a18265-d19f-4c7f-aaad-1787623b2a6e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "91c466a5-a1c0-4dfb-beb7-b97926f1defe",
                              "b4a18265-d19f-4c7f-aaad-1787623b2a6e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "6d11a573-b740-4769-bf03-a75beb506df8",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0bfac4c0-de1f-4830-ac28-6438d40fa7a1",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0bfe8d31-3be8-4924-b08d-121f4d24344c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "0bfac4c0-de1f-4830-ac28-6438d40fa7a1",
                              "0bfe8d31-3be8-4924-b08d-121f4d24344c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 12,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "2f7f1555-44b0-4c8c-9f1b-15cb76dc9906",
                        "title": "`y` is an already-fulfilled promise for a thenable that tries to fulfill twice",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "995fc0d7-e12a-4e98-8297-3b44d904c610",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "80f4039c-b2bd-46b5-a9b4-53acea3291a2",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7c92f2dd-9a97-4788-8879-0359dc9fb5a8",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "80f4039c-b2bd-46b5-a9b4-53acea3291a2",
                              "7c92f2dd-9a97-4788-8879-0359dc9fb5a8"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "968ff1f1-559f-4daa-a71b-d3018d1042b6",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6aeebd3c-4092-414d-a6dd-5fb870d74dfe",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6d584d2b-7f5e-4a6f-afee-d9ba24cf6cc9",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6aeebd3c-4092-414d-a6dd-5fb870d74dfe",
                              "6d584d2b-7f5e-4a6f-afee-d9ba24cf6cc9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "4aac292c-738a-4731-8570-3e571d32dc7c",
                        "title": "`y` is an already-fulfilled promise for a thenable that fulfills but then throws",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "056e202f-50c9-4afa-817a-5e6ea8d8279f",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6d7cdfa0-3e19-47a7-b185-f8dedb24f8b0",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a6177e3b-80b8-4276-b2ab-711853666e40",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6d7cdfa0-3e19-47a7-b185-f8dedb24f8b0",
                              "a6177e3b-80b8-4276-b2ab-711853666e40"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "b30ddbf6-9e29-4570-845f-31b5e56a9379",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "02355a16-8c8c-4400-8666-99821c53bbb7",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d1717177-2c05-4be1-a7af-4e1739a3c211",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "02355a16-8c8c-4400-8666-99821c53bbb7",
                              "d1717177-2c05-4be1-a7af-4e1739a3c211"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "4393dcc4-2bff-45ad-91c0-ee188636d3a1",
                        "title": "`y` is an already-fulfilled promise for an already-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "d18050ed-b6ee-4c29-863a-63a691a97e41",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "975b424f-7050-4022-8153-f7f4b67058ef",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8ee2074a-8885-4db7-affc-adf517b86770",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "975b424f-7050-4022-8153-f7f4b67058ef",
                              "8ee2074a-8885-4db7-affc-adf517b86770"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "cae0aae0-51b8-4b6b-8e74-5804f1e2a4da",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "359b5c10-bcfe-4613-b179-cb7372f403a7",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f04964b2-3e05-44ad-b270-95185071980c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "359b5c10-bcfe-4613-b179-cb7372f403a7",
                              "f04964b2-3e05-44ad-b270-95185071980c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "0cf69f85-ea77-41b9-9aa0-edf3a35d695c",
                        "title": "`y` is an already-fulfilled promise for an eventually-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "7879a3a6-77d8-423f-b2b4-54ef10488b47",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5ac23102-97f7-4498-b9ac-7a5e04f80d93",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8ef4719e-e213-4e57-9ffd-0ee133ed9612",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "5ac23102-97f7-4498-b9ac-7a5e04f80d93",
                              "8ef4719e-e213-4e57-9ffd-0ee133ed9612"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 110,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "f76906d2-a819-4f51-956f-654679146be7",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0d7f0ac8-3ebd-4852-80dc-619b9167c459",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "690dd3fd-540d-4d78-810b-2fce709f1ed0",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "0d7f0ac8-3ebd-4852-80dc-619b9167c459",
                              "690dd3fd-540d-4d78-810b-2fce709f1ed0"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "d372dc95-ee36-4224-8d18-c1878be0a80a",
                        "title": "`y` is an already-fulfilled promise for a synchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "5e408a82-b2bc-483b-9cb3-da69cf520ccf",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "cf2cad11-9bc4-4751-884d-5a34c9a4c14a",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "36511b0c-8e16-475f-8e76-e866a9c46610",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "cf2cad11-9bc4-4751-884d-5a34c9a4c14a",
                              "36511b0c-8e16-475f-8e76-e866a9c46610"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "dd3a2161-dc1a-4ff2-9136-4efcefe1c997",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "211347e9-e25a-41da-8b32-0f86c389eacd",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7f103658-5df1-499f-92e0-15a671c2b906",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "211347e9-e25a-41da-8b32-0f86c389eacd",
                              "7f103658-5df1-499f-92e0-15a671c2b906"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "ea3da982-e848-4020-99a6-b370a7ccd58c",
                        "title": "`y` is an already-fulfilled promise for an asynchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "7f453ba9-e59d-450f-a5ba-4658aa004f17",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "976717aa-53e5-4932-a92c-1f83f9c320b4",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "112cdf08-f930-456d-9757-c3d8560deee6",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "976717aa-53e5-4932-a92c-1f83f9c320b4",
                              "112cdf08-f930-456d-9757-c3d8560deee6"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 13,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "3ef0f6df-dd95-4a66-b97c-b8b8b6e0b947",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0be6ca2b-51c4-4456-a124-e98631b2c6d9",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "282b81cc-7c85-4afc-84a4-c047f00f9a73",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "0be6ca2b-51c4-4456-a124-e98631b2c6d9",
                              "282b81cc-7c85-4afc-84a4-c047f00f9a73"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "9c27e47c-a403-4577-b3f2-4aae6cebfec4",
                        "title": "`y` is an already-fulfilled promise for a synchronously-rejected one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "2b2804e4-1a5f-416d-b4d8-b236de711e5c",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "1d3c306f-a459-4728-92a5-4030f53b8a0b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b68bb0a7-8d97-41c1-914a-0f70a4263b70",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "1d3c306f-a459-4728-92a5-4030f53b8a0b",
                              "b68bb0a7-8d97-41c1-914a-0f70a4263b70"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "c13c3968-3c08-47b1-a5e2-d333b706e835",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4bdd2dc5-8d49-4bba-a21e-2d5c40462a65",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5d67d9dd-8b59-4c5c-a3df-1821c973ba2c",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "4bdd2dc5-8d49-4bba-a21e-2d5c40462a65",
                              "5d67d9dd-8b59-4c5c-a3df-1821c973ba2c"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 14,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "d290aa66-faca-4414-8b5a-eec7c0f8f17f",
                        "title": "`y` is an already-fulfilled promise for a thenable that immediately throws in `then`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "dc3815d2-fb74-4a24-8c3f-771baad56efc",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d9a6647e-2225-4bbe-8e30-e90a8ec0c087",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "34b5dba6-9555-49a0-911d-8e654ad1675a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "d9a6647e-2225-4bbe-8e30-e90a8ec0c087",
                              "34b5dba6-9555-49a0-911d-8e654ad1675a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 9,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "298c2d58-1371-4c3e-9adb-c224c379b802",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 5,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6a8e7066-0be2-4ec8-a00e-d16dec5aaad7",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8377c6b0-bd1a-4032-8090-cf04dec0ed32",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6a8e7066-0be2-4ec8-a00e-d16dec5aaad7",
                              "8377c6b0-bd1a-4032-8090-cf04dec0ed32"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 11,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "89d158da-64ea-49b6-9b0c-ca81c12d4a32",
                        "title": "`y` is an already-fulfilled promise for an object with a throwing `then` accessor",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "ea32d021-8ea6-4308-92d1-675b5e640f20",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 4,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "68de0765-b946-4e92-8521-70e1728683c5",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 6,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "2a0ad5ab-ab84-4431-bd97-8225fb5c5771",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "68de0765-b946-4e92-8521-70e1728683c5",
                              "2a0ad5ab-ab84-4431-bd97-8225fb5c5771"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 10,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "f2856531-ed40-4764-8bf2-da4e443370f3",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "faef55c3-f2c4-4b8d-aa2b-62b59e2aa7f8",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "02590349-8bf3-4b11-9ca1-75d857ad6373",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "faef55c3-f2c4-4b8d-aa2b-62b59e2aa7f8",
                              "02590349-8bf3-4b11-9ca1-75d857ad6373"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 16,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "5bf3a299-100d-4d8c-861d-3fd8c69e0d84",
                        "title": "`y` is an already-fulfilled promise for an already-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "82a61084-17bb-4b34-8960-60ff662651d4",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "73d6da15-c7d5-4244-8c85-3e5eeced731f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 7,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3e9ab70c-dbb3-4511-9178-60542937f001",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "73d6da15-c7d5-4244-8c85-3e5eeced731f",
                              "3e9ab70c-dbb3-4511-9178-60542937f001"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 15,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "fd2b7d4e-9521-46ed-b584-9f382832c2e1",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 8,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "66aeacd9-99cc-44a1-85ee-3fa4c133ae5b",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 9,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "83b1636e-0f51-4a84-b432-7f929fb1f748",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "66aeacd9-99cc-44a1-85ee-3fa4c133ae5b",
                              "83b1636e-0f51-4a84-b432-7f929fb1f748"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 17,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "0c4c7dfc-4ff0-4b50-b577-5fabdc1fc2e0",
                        "title": "`y` is an already-fulfilled promise for an eventually-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "1f0aac75-98f7-4c4e-be0a-8087c0a80953",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0e1c58bc-5141-4b99-b521-d26270d60c94",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d61f65ba-6f3f-47c0-a703-514f6d0bb7b9",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "0e1c58bc-5141-4b99-b521-d26270d60c94",
                              "d61f65ba-6f3f-47c0-a703-514f6d0bb7b9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 113,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "4408ae0b-8cb9-41cc-a61b-9618dc99a1e3",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "6d2873c8-5613-49c0-a6f7-6fa7bde2c30c",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an already-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "7a7eb6c6-399d-48d2-9c65-3cffd28122f9",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "6d2873c8-5613-49c0-a6f7-6fa7bde2c30c",
                              "7a7eb6c6-399d-48d2-9c65-3cffd28122f9"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "6775e4c5-9667-457f-898a-e248a58eeaa1",
                        "title": "`y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "5d92c6cc-fb95-4540-b1ab-cc944729b6cf",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ec90d84d-4e0f-46ba-913e-d73cd71a8e8d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "0b8d6615-da08-4d8b-b4f0-fed6acd2e2f3",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "ec90d84d-4e0f-46ba-913e-d73cd71a8e8d",
                              "0b8d6615-da08-4d8b-b4f0-fed6acd2e2f3"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 109,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "80c4d666-5e17-438a-af84-a0a657dbe61a",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "59591881-297d-4ab0-886e-e08e39598918",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8ea3b2c9-38f6-4b25-9005-e591e9127fda",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "59591881-297d-4ab0-886e-e08e39598918",
                              "8ea3b2c9-38f6-4b25-9005-e591e9127fda"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 115,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "53366e56-dd77-48f4-b07a-bffea39d6305",
                        "title": "`y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "7986702d-8030-4cc9-9eff-819b1dd505aa",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "b088f296-030e-46ce-9b87-3038b85f726d",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "40156ccf-81b6-4113-a1b5-2e799a68f0ff",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "b088f296-030e-46ce-9b87-3038b85f726d",
                              "40156ccf-81b6-4113-a1b5-2e799a68f0ff"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 113,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "cf3a26ba-aaa1-48c4-bed0-861273c99d90",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "edc54ac8-ce5c-430e-8e81-b2489eeabccf",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-fulfilled custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 62,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "03e3be9c-621d-4f9a-b693-557f6f76110a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "edc54ac8-ce5c-430e-8e81-b2489eeabccf",
                              "03e3be9c-621d-4f9a-b693-557f6f76110a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 120,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "04c12849-6c47-48cf-81b1-7b7b5b1c5abc",
                        "title": "`y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "e9329de9-6a09-4724-b5bf-4f83142f0aa3",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8d19a1ff-566c-4dd2-aa43-fd6845f27efa",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c24b4265-4305-48ff-9983-4292cd490da1",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "8d19a1ff-566c-4dd2-aa43-fd6845f27efa",
                              "c24b4265-4305-48ff-9983-4292cd490da1"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 109,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "5aa5994b-1b57-47de-aba4-8bc6ca64ea64",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "449ca958-c2b1-49ac-811b-929952bc9830",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-fulfilled one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 59,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f4301515-f00f-4715-a78f-4c3e854d9741",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "449ca958-c2b1-49ac-811b-929952bc9830",
                              "f4301515-f00f-4715-a78f-4c3e854d9741"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 116,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "763bf248-de19-4db0-ae31-1bdb57eb3194",
                        "title": "`y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "c44642d7-72cb-47ed-9f28-13a29f86a21a",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d870569c-163f-4c97-bc2e-a832cb92eecb",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8f23a5c1-9abd-4d32-b76d-ad360dc15e6d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "d870569c-163f-4c97-bc2e-a832cb92eecb",
                              "8f23a5c1-9abd-4d32-b76d-ad360dc15e6d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 110,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "aff77283-aff4-4dea-a557-d3e557302c46",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c8195b49-dc4c-4d5b-aa57-31c882f6b909",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that tries to fulfill twice `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ec246b7e-0305-423b-8fa3-abdb13172375",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c8195b49-dc4c-4d5b-aa57-31c882f6b909",
                              "ec246b7e-0305-423b-8fa3-abdb13172375"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 115,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "0b066a92-b4e9-4f39-ac12-2ffdf1684887",
                        "title": "`y` is an eventually-fulfilled promise for a thenable that fulfills but then throws",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "9479fb16-0e9f-4478-8cea-468686150b08",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "baf33188-f545-4189-9379-5da64d723022",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "cd2d8a12-4533-4ace-b414-0e0a51976261",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "baf33188-f545-4189-9379-5da64d723022",
                              "cd2d8a12-4533-4ace-b414-0e0a51976261"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 113,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "9bbec342-fc0c-4fb9-9e29-41e8a72b3ff6",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e66c8321-78dc-44b1-aa90-565ccd19bb5f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that fulfills but then throws `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "ef93d57a-19d1-4ec3-a151-6a8fd740375f",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e66c8321-78dc-44b1-aa90-565ccd19bb5f",
                              "ef93d57a-19d1-4ec3-a151-6a8fd740375f"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "314e862f-e137-4afd-a1fd-b20472c807a9",
                        "title": "`y` is an eventually-fulfilled promise for an already-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "01ba3976-01d6-4d41-8be2-b09106c0d501",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "f2c21c1b-1402-455f-905b-2c8699a35812",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3c1bb943-1353-4234-8bd1-01d793629782",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "f2c21c1b-1402-455f-905b-2c8699a35812",
                              "3c1bb943-1353-4234-8bd1-01d793629782"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 111,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "6e00d992-3100-4c19-9134-efb5b04ebc11",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "305dd059-86d2-4874-9ce0-59e7e4fe6d5f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "dbb4ee98-b722-4c6c-aa05-cc24a30595cb",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "305dd059-86d2-4874-9ce0-59e7e4fe6d5f",
                              "dbb4ee98-b722-4c6c-aa05-cc24a30595cb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "3d05ceec-45ce-462a-bdc4-3ac0118e36bf",
                        "title": "`y` is an eventually-fulfilled promise for an eventually-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "8a20b35c-d7ae-4631-ac28-9af58401438a",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 54,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8f72826f-8be4-4cc1-a873-5e507dd19406",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "33673139-49de-4999-b370-dbc7b730288e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "8f72826f-8be4-4cc1-a873-5e507dd19406",
                              "33673139-49de-4999-b370-dbc7b730288e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 110,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "80aba5b8-f397-4377-9479-3af36f1d1f11",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 59,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a9e79afc-7712-436f-9ae7-1ef58194f860",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-fulfilled promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 59,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "2661887b-000c-44ce-8ae8-523a7bfcaf3e",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a9e79afc-7712-436f-9ae7-1ef58194f860",
                              "2661887b-000c-44ce-8ae8-523a7bfcaf3e"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 118,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "1a9db2a6-945a-425e-acae-3a2f0bd8e05a",
                        "title": "`y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "d73486ac-ce0f-41e5-9b8e-fd117047cbe8",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "34755381-8731-49a7-936f-8e2eac000e60",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9cbfb845-d89c-4f07-bc48-0e13d81ede43",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "34755381-8731-49a7-936f-8e2eac000e60",
                              "9cbfb845-d89c-4f07-bc48-0e13d81ede43"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 111,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "2d7cdc9f-35fd-4d47-81ff-bd636ec7cf85",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "1c9ef707-8326-4470-a459-2af7c078e6be",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 59,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a3e5dfc6-e70f-4cba-8fe8-13d4b481540a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "1c9ef707-8326-4470-a459-2af7c078e6be",
                              "a3e5dfc6-e70f-4cba-8fe8-13d4b481540a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 117,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "825126f4-b88c-40d9-9c08-2625d9e6923e",
                        "title": "`y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "62556a81-655f-4426-b217-6a6d419fb765",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "e34867ad-b365-463a-9929-1313984a723c",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "fa0a4a61-d2c3-409e-800e-82f9c40ea049",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "e34867ad-b365-463a-9929-1313984a723c",
                              "fa0a4a61-d2c3-409e-800e-82f9c40ea049"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "34828058-8738-4c2c-9e78-08a1c6332736",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "c0879034-5407-448b-84fa-166de10be40f",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an asynchronously-rejected custom thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 59,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "459095e3-ef9e-4822-aa7f-c3095f1a99e4",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "c0879034-5407-448b-84fa-166de10be40f",
                              "459095e3-ef9e-4822-aa7f-c3095f1a99e4"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 116,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "8e018338-7ede-4eee-a965-c0e71a7a0cf0",
                        "title": "`y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "7e23cd8e-1eda-4152-9c04-dbae7c47c745",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "be7ca7ce-f62a-4eef-981c-62b6ccc4dfd6",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "75e7a259-c415-43fe-ae19-d2e85d69af27",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "be7ca7ce-f62a-4eef-981c-62b6ccc4dfd6",
                              "75e7a259-c415-43fe-ae19-d2e85d69af27"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 113,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "bffb8441-31eb-4fbc-a9a4-9a212a338679",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a681671d-1d66-4f58-9a74-7b8ada9ebcb2",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a synchronously-rejected one-time thenable `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "769beb25-f9ad-4779-8f05-58bc859f2b2a",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "a681671d-1d66-4f58-9a74-7b8ada9ebcb2",
                              "769beb25-f9ad-4779-8f05-58bc859f2b2a"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "a81fdfce-3518-4704-917e-06c06e5de4de",
                        "title": "`y` is an eventually-fulfilled promise for a thenable that immediately throws in `then`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "b129115d-ede3-42b3-871f-c189b8664987",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "85f71903-3137-432b-8b2e-f8c63a7eb739",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "4cb4d080-d452-48eb-a7dd-9b2a8df13c57",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "85f71903-3137-432b-8b2e-f8c63a7eb739",
                              "4cb4d080-d452-48eb-a7dd-9b2a8df13c57"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 113,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "ad3a5d8a-1a59-4f70-83d2-335fb000a5f5",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 61,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "27b25911-b200-4e92-a189-4872b93a193c",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for a thenable that immediately throws in `then` `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "be9f13ed-1c37-4451-8f88-e25cebb70182",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "27b25911-b200-4e92-a189-4872b93a193c",
                              "be9f13ed-1c37-4451-8f88-e25cebb70182"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 119,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "8517781f-dbdd-453c-bec5-276225e2c3db",
                        "title": "`y` is an eventually-fulfilled promise for an object with a throwing `then` accessor",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "42782b74-9734-41d4-99bd-c0d9ef6d9b31",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "3cb218a0-d661-4795-aeed-d1b616a76eab",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 56,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "885ee7af-7930-4072-8561-e9588b1d70cb",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "3cb218a0-d661-4795-aeed-d1b616a76eab",
                              "885ee7af-7930-4072-8561-e9588b1d70cb"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 111,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "8569904f-799c-4a14-b306-18b1c67e6c5b",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 55,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "aba0b01b-37be-4269-9468-8d5bf0c9ef22",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an object with a throwing `then` accessor `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 58,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "d27ff312-969a-4bd6-855f-41f898411f15",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "aba0b01b-37be-4269-9468-8d5bf0c9ef22",
                              "d27ff312-969a-4bd6-855f-41f898411f15"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 113,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "a0ff1bb9-24b7-4e52-b751-a576269f5c81",
                        "title": "`y` is an eventually-fulfilled promise for an already-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "d8b918a3-83fb-4a13-9e9d-3539845a43e0",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "8e9eadad-2729-4c86-b0e4-f7a3c59e6fd9",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "98d78fac-da3e-4044-b081-90a78e105e6d",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "8e9eadad-2729-4c86-b0e4-f7a3c59e6fd9",
                              "98d78fac-da3e-4044-b081-90a78e105e6d"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 114,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "0f43e682-6299-4f9d-bbd4-fb59f2fcf346",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 60,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "483e47cc-f419-4cfe-901f-0f04296e1d86",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an already-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 61,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "df4dccaa-b7dd-4ba6-a7e4-3cd60ffa1c95",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "483e47cc-f419-4cfe-901f-0f04296e1d86",
                              "df4dccaa-b7dd-4ba6-a7e4-3cd60ffa1c95"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 121,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "1d0b450b-18fd-411d-b520-a29f120d04e8",
                        "title": "`y` is an eventually-fulfilled promise for an eventually-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [],
                        "suites": [
                          {
                            "uuid": "96f5ed59-08c6-4dfe-a62b-f63eac143c59",
                            "title": "`then` calls `resolvePromise` synchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 63,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "9bbdfa88-2759-4771-b250-7a2fff491f0e",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` synchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 57,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5f595ba5-c5a1-4a52-8a84-0aac4117fbe5",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "9bbdfa88-2759-4771-b250-7a2fff491f0e",
                              "5f595ba5-c5a1-4a52-8a84-0aac4117fbe5"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 120,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          },
                          {
                            "uuid": "d11f3c48-9a47-4f97-8b2a-a44d563ff0ca",
                            "title": "`then` calls `resolvePromise` asynchronously",
                            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                            "beforeHooks": [],
                            "afterHooks": [],
                            "tests": [
                              {
                                "title": "via return from a fulfilled promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a fulfilled promise",
                                "timedOut": false,
                                "duration": 60,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "5569b8d6-e52c-407a-8cb5-da0e9e7a9ea3",
                                "isHook": false,
                                "skipped": false
                              },
                              {
                                "title": "via return from a rejected promise",
                                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.1: If/when `resolvePromise` is called with value `y`, run `[[Resolve]](promise, y)` `y` is a thenable for a thenable `y` is an eventually-fulfilled promise for an eventually-rejected promise `then` calls `resolvePromise` asynchronously via return from a rejected promise",
                                "timedOut": false,
                                "duration": 64,
                                "state": "passed",
                                "speed": "fast",
                                "pass": true,
                                "fail": false,
                                "pending": false,
                                "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                                "err": {},
                                "isRoot": false,
                                "uuid": "a66c16d6-ce4b-457e-b489-3a10d2b44392",
                                "isHook": false,
                                "skipped": false
                              }
                            ],
                            "suites": [],
                            "passes": [
                              "5569b8d6-e52c-407a-8cb5-da0e9e7a9ea3",
                              "a66c16d6-ce4b-457e-b489-3a10d2b44392"
                            ],
                            "failures": [],
                            "pending": [],
                            "skipped": [],
                            "duration": 124,
                            "root": false,
                            "rootEmpty": false,
                            "_timeout": 200
                          }
                        ],
                        "passes": [],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 0,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "cb404152-a1f4-4156-84be-a43bf026467b",
                "title": "2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "8e915ff9-542c-4a02-bf5a-8628b1ab262d",
                    "title": "`r` is `undefined`",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "32976ce1-71f1-4da3-8f8e-d938c85d9ed6",
                        "title": "`then` calls `rejectPromise` synchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "95b3ce82-7ad2-4402-bae3-2066981c1669",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "3605d968-d45e-4098-9a77-992ab6256c77",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "95b3ce82-7ad2-4402-bae3-2066981c1669",
                          "3605d968-d45e-4098-9a77-992ab6256c77"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 5,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "62b6473d-1fa2-41c9-8d77-c5e06cf14095",
                        "title": "`then` calls `rejectPromise` asynchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "d904bc1b-c906-49b7-bc41-826008002bdb",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `undefined` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "f9204a24-e102-4cfb-8299-07f1f9befb9d",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "d904bc1b-c906-49b7-bc41-826008002bdb",
                          "f9204a24-e102-4cfb-8299-07f1f9befb9d"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 9,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "8c833ca2-0e9e-4ec6-ae45-1cd92df39895",
                    "title": "`r` is `null`",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "db4d912d-9e47-4018-8d0f-6e98ad5dfa5c",
                        "title": "`then` calls `rejectPromise` synchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "6df29013-73a4-4662-864b-8066bdeb43b4",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "0d509bd0-2147-4fbe-8d37-ef59299225d4",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "6df29013-73a4-4662-864b-8066bdeb43b4",
                          "0d509bd0-2147-4fbe-8d37-ef59299225d4"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 6,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "ebe3f12d-5f97-4f8e-8dcd-da85b04a35f1",
                        "title": "`then` calls `rejectPromise` asynchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "a2f9364c-fee3-4dda-a0cc-4f17374489d8",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `null` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "378cecea-3405-43da-8c58-18d33ca46b87",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "a2f9364c-fee3-4dda-a0cc-4f17374489d8",
                          "378cecea-3405-43da-8c58-18d33ca46b87"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 9,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "19048148-f05f-48dc-a80f-043f404d97b4",
                    "title": "`r` is `false`",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "10abd1da-09fb-4e9a-83c7-d8a9b4f6edd6",
                        "title": "`then` calls `rejectPromise` synchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "a3917b0b-a188-4f69-8db5-1ddd126e4c42",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "48146746-bdc8-4e49-b134-a736c4676917",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "a3917b0b-a188-4f69-8db5-1ddd126e4c42",
                          "48146746-bdc8-4e49-b134-a736c4676917"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 7,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "fcd7c7cf-626c-4770-a1dc-4e7ad2ab33e7",
                        "title": "`then` calls `rejectPromise` asynchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "63248c6e-e0d8-41df-a729-55dc3158bd59",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `false` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "378e566b-9e9d-4703-b139-2963f66e7015",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "63248c6e-e0d8-41df-a729-55dc3158bd59",
                          "378e566b-9e9d-4703-b139-2963f66e7015"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 9,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "c57d9aa0-8767-40b3-83ae-fa4ebe1d9cbf",
                    "title": "`r` is `0`",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "6d54dcb7-0e88-430b-bac4-d1e2add6ada3",
                        "title": "`then` calls `rejectPromise` synchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "c2319a2a-6d82-43f4-9ca9-11d292a04021",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "c37bb43b-0e12-4171-bde6-fe742cfa7842",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "c2319a2a-6d82-43f4-9ca9-11d292a04021",
                          "c37bb43b-0e12-4171-bde6-fe742cfa7842"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 6,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "3c72c1d1-299e-4a26-b8ce-e77d0c0e20b1",
                        "title": "`then` calls `rejectPromise` asynchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "cff3aa3a-cc25-4b7c-a180-efd8e5a3450b",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is `0` `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "c15db055-e602-4910-bfd0-cc90db2fda7c",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "cff3aa3a-cc25-4b7c-a180-efd8e5a3450b",
                          "c15db055-e602-4910-bfd0-cc90db2fda7c"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 11,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "b74e7949-fc73-41f1-a096-9aff80cb4290",
                    "title": "`r` is an error",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "4e07cb38-78c1-40dc-9453-a80f181556e2",
                        "title": "`then` calls `rejectPromise` synchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "d20cf9d5-8135-442a-82c0-e60a3b9f45e9",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "e6fbb94f-a50e-4cdc-90ee-3e52a6b70193",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "d20cf9d5-8135-442a-82c0-e60a3b9f45e9",
                          "e6fbb94f-a50e-4cdc-90ee-3e52a6b70193"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 7,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "c49e4a90-74ba-4084-9e37-b1244e3fd570",
                        "title": "`then` calls `rejectPromise` asynchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "6abf2498-e2e4-4194-b4eb-6223cf12f54a",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "eab3b054-d4c9-4546-a64a-11659a8689f0",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "6abf2498-e2e4-4194-b4eb-6223cf12f54a",
                          "eab3b054-d4c9-4546-a64a-11659a8689f0"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 11,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "f25503fa-3a4e-4aa0-a8af-8200ec4a5cf4",
                    "title": "`r` is an error without a stack",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "f7aaa690-af54-491d-9cfd-5ef00b81cee2",
                        "title": "`then` calls `rejectPromise` synchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "801f1561-a0ee-4a74-b220-30e6c9ffa6ad",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "f796d46b-f0f6-452e-9192-4e6bfa65cb24",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "801f1561-a0ee-4a74-b220-30e6c9ffa6ad",
                          "f796d46b-f0f6-452e-9192-4e6bfa65cb24"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 6,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "9e6af988-e504-4d4f-a41b-cc4c7e631aa7",
                        "title": "`then` calls `rejectPromise` asynchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "00da95ed-5edf-415b-a1ea-47932e13e469",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an error without a stack `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "25b80374-63d5-4dde-83b7-4c75fb198e45",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "00da95ed-5edf-415b-a1ea-47932e13e469",
                          "25b80374-63d5-4dde-83b7-4c75fb198e45"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 10,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "dc8d3835-fab1-42f2-a171-bd36ede4d9a0",
                    "title": "`r` is a date",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "dfd35f73-9e5d-4725-b7bb-90796061a70d",
                        "title": "`then` calls `rejectPromise` synchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "13d0abf9-4d60-4534-964d-140dac24d0fc",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "ae4ec775-beb5-452a-ae89-74bcc8de99b9",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "13d0abf9-4d60-4534-964d-140dac24d0fc",
                          "ae4ec775-beb5-452a-ae89-74bcc8de99b9"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 5,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "657cc257-601c-435d-a695-21dd370d3766",
                        "title": "`then` calls `rejectPromise` asynchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "530f5039-4ac2-4576-a6a4-508a6413b1a8",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a date `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "a590e83c-5e1f-426e-832a-e27cd24d846d",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "530f5039-4ac2-4576-a6a4-508a6413b1a8",
                          "a590e83c-5e1f-426e-832a-e27cd24d846d"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 12,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "f0905867-71f2-4bd5-b0df-ac9c85a7b1e0",
                    "title": "`r` is an object",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "f48052f6-730e-46a3-9211-01b7e5bfe004",
                        "title": "`then` calls `rejectPromise` synchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "556afde7-aaa3-431b-86c1-4127be4f3ead",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "f817b3d5-91ea-4280-9d35-287de708b363",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "556afde7-aaa3-431b-86c1-4127be4f3ead",
                          "f817b3d5-91ea-4280-9d35-287de708b363"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 7,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "84c66db4-497e-441c-98ac-97470b90c484",
                        "title": "`then` calls `rejectPromise` asynchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 8,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "009a06af-5d4f-42f1-91d4-2dcc5fe047d0",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an object `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "bee05392-971f-48e4-9ed2-0f1cda574ffd",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "009a06af-5d4f-42f1-91d4-2dcc5fe047d0",
                          "bee05392-971f-48e4-9ed2-0f1cda574ffd"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 14,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "5edca455-616b-40d5-aa92-825f574a8292",
                    "title": "`r` is an always-pending thenable",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "6045782b-bd8b-4bac-bc4f-6ede522e38b2",
                        "title": "`then` calls `rejectPromise` synchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "5641efe8-d935-4b6a-b015-ef0a5b8fb9e9",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "af2a46d1-5e23-498d-aa3d-5b8d4198088e",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "5641efe8-d935-4b6a-b015-ef0a5b8fb9e9",
                          "af2a46d1-5e23-498d-aa3d-5b8d4198088e"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 7,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "2a85a70b-59a5-45d8-a93e-b85776d0b3f1",
                        "title": "`then` calls `rejectPromise` asynchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 7,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "1177d13b-8a1a-4046-bce9-9affc68e44a0",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is an always-pending thenable `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "db54443a-6794-49b1-be50-8559804e78b6",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "1177d13b-8a1a-4046-bce9-9affc68e44a0",
                          "db54443a-6794-49b1-be50-8559804e78b6"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 11,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "c2c7158f-2171-4268-8cb6-07130672d3b2",
                    "title": "`r` is a fulfilled promise",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "fa63b36e-559c-41fa-a7bd-15da2ca139b0",
                        "title": "`then` calls `rejectPromise` synchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "7a8c3aa5-d8e6-4f9f-86b7-a4f66579f32f",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "ac7c270c-bd7b-4a82-b7b8-318cbddfe954",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "7a8c3aa5-d8e6-4f9f-86b7-a4f66579f32f",
                          "ac7c270c-bd7b-4a82-b7b8-318cbddfe954"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 8,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "30c309d9-7d13-4afb-92fe-d13d30a3018d",
                        "title": "`then` calls `rejectPromise` asynchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "5ec35c41-530c-4b29-b72b-bf8f7d4d8317",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a fulfilled promise `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 6,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "22cec154-dcc8-4547-aafe-d670d169fe83",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "5ec35c41-530c-4b29-b72b-bf8f7d4d8317",
                          "22cec154-dcc8-4547-aafe-d670d169fe83"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 12,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "6e6ab428-1e08-4c82-b848-f5c6cf17bf5b",
                    "title": "`r` is a rejected promise",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "77fdabaf-f971-4955-96a6-83c0e8ddec35",
                        "title": "`then` calls `rejectPromise` synchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` synchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "5ca9d7df-a25a-4663-8a0e-2e8ce0332c38",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` synchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "1160ea55-2651-4f2d-be8f-d64778a33f8b",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "5ca9d7df-a25a-4663-8a0e-2e8ce0332c38",
                          "1160ea55-2651-4f2d-be8f-d64778a33f8b"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 7,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "ffe5a90c-c6c9-4252-b838-06442929ff4b",
                        "title": "`then` calls `rejectPromise` asynchronously",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` asynchronously via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "3bb6df06-aff8-43e0-8a4f-c4c699243438",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.2: If/when `rejectPromise` is called with reason `r`, reject `promise` with `r` `r` is a rejected promise `then` calls `rejectPromise` asynchronously via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "2f08812c-2af5-453b-9b0c-de9b4a56bbb6",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "3bb6df06-aff8-43e0-8a4f-c4c699243438",
                          "2f08812c-2af5-453b-9b0c-de9b4a56bbb6"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 8,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "1ce9fc23-36fc-4505-a591-06e269430dbf",
                "title": "2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored.",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "eb2eaac8-47f5-4ecc-ba1d-dd22581ce717",
                    "title": "calling `resolvePromise` then `rejectPromise`, both synchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both synchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5fde5d25-7f82-4954-a9be-09a979e4550e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both synchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 2,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "77a16b93-46a2-41b2-a9b9-2e05a1310de9",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "5fde5d25-7f82-4954-a9be-09a979e4550e",
                      "77a16b93-46a2-41b2-a9b9-2e05a1310de9"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 5,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "af439cf5-551b-42ea-a7f3-9ec7717c01f6",
                    "title": "calling `resolvePromise` synchronously then `rejectPromise` asynchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` synchronously then `rejectPromise` asynchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f9eccfc7-2e47-45ff-97f1-c96343613684",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` synchronously then `rejectPromise` asynchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c6d86e0c-2d8a-4801-a04c-3964dd1bc6e9",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "f9eccfc7-2e47-45ff-97f1-c96343613684",
                      "c6d86e0c-2d8a-4801-a04c-3964dd1bc6e9"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 7,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "407c2e9e-cbed-4b1c-9b92-c5f69aff6dc3",
                    "title": "calling `resolvePromise` then `rejectPromise`, both asynchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both asynchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "97472f3a-0222-4ee8-a889-eeeeeb56672e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` then `rejectPromise`, both asynchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "50ec4a2e-c857-4c9d-b5dc-b4cf1eeb5433",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "97472f3a-0222-4ee8-a889-eeeeeb56672e",
                      "50ec4a2e-c857-4c9d-b5dc-b4cf1eeb5433"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 6,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "2b74988f-d564-4777-a5c5-1e6bef913777",
                    "title": "calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "a24bb10d-fcec-440c-b015-9466a0ed3795",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling `rejectPromise`, both synchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "dd8e772d-a832-416f-99af-f4646db6623e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "a24bb10d-fcec-440c-b015-9466a0ed3795",
                      "dd8e772d-a832-416f-99af-f4646db6623e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 112,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "e46f9f96-d7b4-4ac3-b173-31b5395f6208",
                    "title": "calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 55,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8eb40213-6d94-4ab0-a857-e3d36bdee4a8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling `rejectPromise`, both synchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e2056415-2ba8-4d01-9a83-d99cd955dd5e",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8eb40213-6d94-4ab0-a857-e3d36bdee4a8",
                      "e2056415-2ba8-4d01-9a83-d99cd955dd5e"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 109,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "8fb986f2-6e4c-493a-b3dc-03a532b91a8a",
                    "title": "calling `rejectPromise` then `resolvePromise`, both synchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both synchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8739da4e-d22a-41bb-82a4-d323d66fe093",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both synchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "6e7916d3-3636-44aa-b2d4-adef9a4650c0",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "8739da4e-d22a-41bb-82a4-d323d66fe093",
                      "6e7916d3-3636-44aa-b2d4-adef9a4650c0"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 7,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "3c5d7519-2782-40e9-90d4-fa3d8f2408f0",
                    "title": "calling `rejectPromise` synchronously then `resolvePromise` asynchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` synchronously then `resolvePromise` asynchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "57a5892f-a268-4163-9137-0704efa8c4b2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` synchronously then `resolvePromise` asynchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "23b38fe9-d1d5-4393-bc9e-76d6ada15e6f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "57a5892f-a268-4163-9137-0704efa8c4b2",
                      "23b38fe9-d1d5-4393-bc9e-76d6ada15e6f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 6,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "0cf03841-1444-40f2-9fc4-5e9d52475497",
                    "title": "calling `rejectPromise` then `resolvePromise`, both asynchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both asynchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3851ebd8-449c-4cb8-ac3d-8b7c5e196d48",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` then `resolvePromise`, both asynchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f2bf39d8-056b-473d-997f-c6624d0ccebb",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "3851ebd8-449c-4cb8-ac3d-8b7c5e196d48",
                      "f2bf39d8-056b-473d-997f-c6624d0ccebb"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 8,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "2773bc68-03ed-4c03-8199-bab3683d1714",
                    "title": "calling `resolvePromise` twice synchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice synchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "571f518c-7881-4614-a35f-c2b42aa09275",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice synchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3b67b5ee-fc11-454a-955f-96eefa0c8d7d",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "571f518c-7881-4614-a35f-c2b42aa09275",
                      "3b67b5ee-fc11-454a-955f-96eefa0c8d7d"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 8,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "fd86d5d2-39db-4539-8366-2310b3761d26",
                    "title": "calling `resolvePromise` twice, first synchronously then asynchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, first synchronously then asynchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7edb4955-d3fe-40ea-ad3a-d0f768fa6067",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, first synchronously then asynchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5ef6ec09-2399-4eed-94d2-0004f9a5a687",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "7edb4955-d3fe-40ea-ad3a-d0f768fa6067",
                      "5ef6ec09-2399-4eed-94d2-0004f9a5a687"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 6,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "4b698b51-3874-4615-9877-08e305fc3c62",
                    "title": "calling `resolvePromise` twice, both times asynchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, both times asynchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "122cf20b-be3b-4bf0-8aa7-7f95e825b5a3",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` twice, both times asynchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 4,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "65d2ebc1-117b-47db-84e6-f6b264b45e0f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "122cf20b-be3b-4bf0-8aa7-7f95e825b5a3",
                      "65d2ebc1-117b-47db-84e6-f6b264b45e0f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 9,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "4066c9c4-c076-4b79-9fac-3e94ac9a2428",
                    "title": "calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e60196eb-4b71-44f8-9102-2c2adb4b8a22",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-fulfilled promise, then calling it again, both times synchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 56,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "76da421a-f862-494a-848c-db95896bae66",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e60196eb-4b71-44f8-9102-2c2adb4b8a22",
                      "76da421a-f862-494a-848c-db95896bae66"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 113,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "99c271a9-452c-4a3c-b7c9-acf7d22de66e",
                    "title": "calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 57,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "164847c0-f084-49d2-8c83-8872e623fc20",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `resolvePromise` with an asynchronously-rejected promise, then calling it again, both times synchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 54,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e99dc6e2-c39c-4163-b8ed-cce2b7f8d35f",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "164847c0-f084-49d2-8c83-8872e623fc20",
                      "e99dc6e2-c39c-4163-b8ed-cce2b7f8d35f"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 111,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "f4f149f0-d6f3-475a-a5f8-d0d51eb15926",
                    "title": "calling `rejectPromise` twice synchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice synchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "49c1acfd-98bc-4752-af4c-859c923e441f",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice synchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "58ed30be-4b9f-486e-b723-09fa87509803",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "49c1acfd-98bc-4752-af4c-859c923e441f",
                      "58ed30be-4b9f-486e-b723-09fa87509803"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 8,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "69b868b3-a4b6-4338-86eb-9ee08884290b",
                    "title": "calling `rejectPromise` twice, first synchronously then asynchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, first synchronously then asynchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e471e5a0-954d-48fc-8d96-10f7b0cff6d4",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, first synchronously then asynchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 3,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "c2a1456b-7939-414b-8f07-1df30fd805cf",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e471e5a0-954d-48fc-8d96-10f7b0cff6d4",
                      "c2a1456b-7939-414b-8f07-1df30fd805cf"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 6,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "5e8762ca-2a46-4fe2-9f0f-e34cbb1c3853",
                    "title": "calling `rejectPromise` twice, both times asynchronously",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, both times asynchronously via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 5,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d4be38de-18cd-44e6-ad5d-730a00487e82",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. calling `rejectPromise` twice, both times asynchronously via return from a rejected promise",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "91184c92-f0ec-481b-ac96-eb37daaf8c7b",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "d4be38de-18cd-44e6-ad5d-730a00487e82",
                      "91184c92-f0ec-481b-ac96-eb37daaf8c7b"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 11,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "0ab9d80f-8609-47ba-b976-1f8a47753b79",
                    "title": "saving and abusing `resolvePromise` and `rejectPromise`",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [
                      {
                        "title": "\"before each\" hook",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` \"before each\" hook",
                        "timedOut": false,
                        "duration": 0,
                        "pass": false,
                        "fail": false,
                        "pending": false,
                        "code": "savedResolvePromise = null;\nsavedRejectPromise = null;",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2e2c6aaa-bb98-49c4-bf6c-62e840e1c98f",
                        "isHook": true,
                        "skipped": false
                      }
                    ],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "via return from a fulfilled promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` via return from a fulfilled promise",
                        "timedOut": false,
                        "duration": 102,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "914aea8b-267c-4f63-a91e-b514f18ae5a8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "via return from a rejected promise",
                        "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.3: If both `resolvePromise` and `rejectPromise` are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored. saving and abusing `resolvePromise` and `rejectPromise` via return from a rejected promise",
                        "timedOut": false,
                        "duration": 101,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0416e5c1-513d-44cc-b610-dd8d88862ec5",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "914aea8b-267c-4f63-a91e-b514f18ae5a8",
                      "0416e5c1-513d-44cc-b610-dd8d88862ec5"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 203,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "2f34deaa-587f-4c11-855a-94cdc01ff2b0",
                "title": "2.3.3.3.4: If calling `then` throws an exception `e`,",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "e856f20d-085d-400b-b204-53ef77ad72bc",
                    "title": "2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it.",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "4089af1d-0572-49c9-8d77-267a31ef4cf4",
                        "title": "`resolvePromise` was called with a non-thenable",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with a non-thenable via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "507a9df4-abb8-47b9-8a02-83d5bcd7ed14",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with a non-thenable via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "fbd352bc-7ff7-40e8-8c24-68bb91b8da09",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "507a9df4-abb8-47b9-8a02-83d5bcd7ed14",
                          "fbd352bc-7ff7-40e8-8c24-68bb91b8da09"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 8,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "8f17edab-3c56-4976-b1be-9b6cbb23d703",
                        "title": "`resolvePromise` was called with an asynchronously-fulfilled promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-fulfilled promise via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 55,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "1ae4d6d3-c882-4c74-87f2-6ae8efeac79b",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-fulfilled promise via return from a rejected promise",
                            "timedOut": false,
                            "duration": 54,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "e951f399-f97d-48de-b672-19da87c680f4",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "1ae4d6d3-c882-4c74-87f2-6ae8efeac79b",
                          "e951f399-f97d-48de-b672-19da87c680f4"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 109,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "f1bf8f33-13a7-47a7-a77c-f8c04abffcb1",
                        "title": "`resolvePromise` was called with an asynchronously-rejected promise",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-rejected promise via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 56,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "1bef8920-a097-4841-95e0-0cf811d5e66b",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` was called with an asynchronously-rejected promise via return from a rejected promise",
                            "timedOut": false,
                            "duration": 57,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "01efc875-2ff0-4e09-b012-b47850e5d949",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "1bef8920-a097-4841-95e0-0cf811d5e66b",
                          "01efc875-2ff0-4e09-b012-b47850e5d949"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 113,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "04da4410-276e-44a7-80d9-ab3aa7bbb78c",
                        "title": "`rejectPromise` was called",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` was called via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "5d7efd1b-fa22-401a-b629-2d838cbdac1d",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` was called via return from a rejected promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "a7a3ba50-3a20-4eb1-9d71-5c1ef4455240",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "5d7efd1b-fa22-401a-b629-2d838cbdac1d",
                          "a7a3ba50-3a20-4eb1-9d71-5c1ef4455240"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 7,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "247b2052-5fdd-47e6-9eda-78b0cfd49d1b",
                        "title": "`resolvePromise` then `rejectPromise` were called",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` then `rejectPromise` were called via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "9b3c0e5a-cc74-4d14-ab11-8e3e840921e1",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `resolvePromise` then `rejectPromise` were called via return from a rejected promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "be34dc60-2a17-406f-9e42-e3e7661b90c8",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "9b3c0e5a-cc74-4d14-ab11-8e3e840921e1",
                          "be34dc60-2a17-406f-9e42-e3e7661b90c8"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 7,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "506139cc-988b-4746-bf07-86ca5169cc2a",
                        "title": "`rejectPromise` then `resolvePromise` were called",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` then `resolvePromise` were called via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "15805c88-f186-459c-99fc-8995edfd1a44",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.1: If `resolvePromise` or `rejectPromise` have been called, ignore it. `rejectPromise` then `resolvePromise` were called via return from a rejected promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "c287d11b-3ae6-4027-b41a-6cda69603028",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "15805c88-f186-459c-99fc-8995edfd1a44",
                          "c287d11b-3ae6-4027-b41a-6cda69603028"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 7,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  },
                  {
                    "uuid": "3bc2b28b-044d-46eb-8a53-44f6442117d9",
                    "title": "2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason.",
                    "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [],
                    "suites": [
                      {
                        "uuid": "99f65743-636a-445e-b295-9746f5cd3807",
                        "title": "straightforward case",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. straightforward case via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 2,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "f8780739-1c07-4013-a261-89cb5cecf471",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. straightforward case via return from a rejected promise",
                            "timedOut": false,
                            "duration": 5,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "72e87541-1e48-4983-95b1-46641118c106",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "f8780739-1c07-4013-a261-89cb5cecf471",
                          "72e87541-1e48-4983-95b1-46641118c106"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 7,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "dd3df83c-33dd-49e8-a4bb-23a43e152035",
                        "title": "`resolvePromise` is called asynchronously before the `throw`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `resolvePromise` is called asynchronously before the `throw` via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 3,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "05011bd5-f16e-4f5a-af4a-75ad066e3430",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `resolvePromise` is called asynchronously before the `throw` via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "214214bb-2b4b-4c51-9a28-3910b597e1da",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "05011bd5-f16e-4f5a-af4a-75ad066e3430",
                          "214214bb-2b4b-4c51-9a28-3910b597e1da"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 7,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      },
                      {
                        "uuid": "a16bc2d4-4814-40e2-946a-50fa70929e93",
                        "title": "`rejectPromise` is called asynchronously before the `throw`",
                        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                        "beforeHooks": [],
                        "afterHooks": [],
                        "tests": [
                          {
                            "title": "via return from a fulfilled promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `rejectPromise` is called asynchronously before the `throw` via return from a fulfilled promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "2c0b3c32-c24a-4821-94ec-9284a14d13ea",
                            "isHook": false,
                            "skipped": false
                          },
                          {
                            "title": "via return from a rejected promise",
                            "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.3: If `then` is a function, call it with `x` as `this`, first argument `resolvePromise`, and second argument `rejectPromise` 2.3.3.3.4: If calling `then` throws an exception `e`, 2.3.3.3.4.2: Otherwise, reject `promise` with `e` as the reason. `rejectPromise` is called asynchronously before the `throw` via return from a rejected promise",
                            "timedOut": false,
                            "duration": 4,
                            "state": "passed",
                            "speed": "fast",
                            "pass": true,
                            "fail": false,
                            "pending": false,
                            "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                            "err": {},
                            "isRoot": false,
                            "uuid": "bf65b5a5-4f19-44cb-bddb-368560e82c22",
                            "isHook": false,
                            "skipped": false
                          }
                        ],
                        "suites": [],
                        "passes": [
                          "2c0b3c32-c24a-4821-94ec-9284a14d13ea",
                          "bf65b5a5-4f19-44cb-bddb-368560e82c22"
                        ],
                        "failures": [],
                        "pending": [],
                        "skipped": [],
                        "duration": 8,
                        "root": false,
                        "rootEmpty": false,
                        "_timeout": 200
                      }
                    ],
                    "passes": [],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 0,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 200
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "a1d6825c-1706-4ff5-8111-015e670e22e0",
            "title": "2.3.3.4: If `then` is not a function, fulfill promise with `x`",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "x = { then: then };",
                "err": {},
                "isRoot": false,
                "uuid": "05294ca5-6584-422b-99e0-ddf636e282c5",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before each\" hook",
                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "x = { then: then };",
                "err": {},
                "isRoot": false,
                "uuid": "f423f299-a75c-4b5c-af56-fa19cc7b2ee0",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before each\" hook",
                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "x = { then: then };",
                "err": {},
                "isRoot": false,
                "uuid": "6a603959-2c47-4f19-b5d3-4d3946464e62",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before each\" hook",
                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "x = { then: then };",
                "err": {},
                "isRoot": false,
                "uuid": "03460e8f-3d81-4fc1-8ac7-661dd75f56db",
                "isHook": true,
                "skipped": false
              },
              {
                "title": "\"before each\" hook",
                "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "x = { then: then };",
                "err": {},
                "isRoot": false,
                "uuid": "c39a3818-1ad2-4de6-a781-eed8fc70136f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "fefa358e-37f7-4d39-87e9-71f213bf8dd7",
                "title": "`then` is `5`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is `5` via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "7f6ea36a-b679-41b2-b614-3219a8a3827f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is `5` via return from a rejected promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fe457dca-2e56-4cfa-aa96-829f5637093e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "7f6ea36a-b679-41b2-b614-3219a8a3827f",
                  "fe457dca-2e56-4cfa-aa96-829f5637093e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 8,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "57ea8a19-8be1-4fb2-b063-c7e8d165e1c3",
                "title": "`then` is an object",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "46c350d9-16c2-4dfe-b5d7-65c5f35c7703",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object via return from a rejected promise",
                    "timedOut": false,
                    "duration": 5,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e9bafb83-f790-4eb6-9356-9c2eb64f3f17",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "46c350d9-16c2-4dfe-b5d7-65c5f35c7703",
                  "e9bafb83-f790-4eb6-9356-9c2eb64f3f17"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 8,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "33363d5b-843b-4146-91aa-0fc897af785a",
                "title": "`then` is an array containing a function",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an array containing a function via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 2,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5bd886e3-6b91-4b77-875d-96dd501ce1fe",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an array containing a function via return from a rejected promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "01dabfab-b3c7-4e46-9c8f-c7bdce578b96",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "5bd886e3-6b91-4b77-875d-96dd501ce1fe",
                  "01dabfab-b3c7-4e46-9c8f-c7bdce578b96"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 6,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "d06a76b3-e5e4-4d4d-8498-bdf94788f323",
                "title": "`then` is a regular expression",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is a regular expression via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "54e58663-138a-45d8-bc49-fbcbc6a7650f",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is a regular expression via return from a rejected promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b936124b-3de0-4824-96fa-b04dbcf7224a",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "54e58663-138a-45d8-bc49-fbcbc6a7650f",
                  "b936124b-3de0-4824-96fa-b04dbcf7224a"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 6,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              },
              {
                "uuid": "410da356-6ac1-4a00-88a5-b6d0f32eb4e8",
                "title": "`then` is an object inheriting from `Function.prototype`",
                "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.3.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "via return from a fulfilled promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object inheriting from `Function.prototype` via return from a fulfilled promise",
                    "timedOut": false,
                    "duration": 3,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = resolved(dummy).then(function onBasePromiseFulfilled() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "01f129a3-a9e8-4147-8dc5-4cf6f6944e23",
                    "isHook": false,
                    "skipped": false
                  },
                  {
                    "title": "via return from a rejected promise",
                    "fullTitle": "2.3.3: Otherwise, if `x` is an object or function, 2.3.3.4: If `then` is not a function, fulfill promise with `x` `then` is an object inheriting from `Function.prototype` via return from a rejected promise",
                    "timedOut": false,
                    "duration": 4,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "var promise = rejected(dummy).then(null, function onBasePromiseRejected() {\n    return xFactory();\n});\ntest(promise, done);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e1e6e651-de6e-4f64-ae07-e6187437b983",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "01f129a3-a9e8-4147-8dc5-4cf6f6944e23",
                  "e1e6e651-de6e-4f64-ae07-e6187437b983"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 7,
                "root": false,
                "rootEmpty": false,
                "_timeout": 200
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      },
      {
        "uuid": "0f25bf73-c4f8-441e-a958-6f70adc53297",
        "title": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x`",
        "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
        "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "9bd8f576-b9a4-48e5-898c-300a2904fb71",
            "title": "The value is `undefined`",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` already-fulfilled",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "81f85551-7a7e-467c-a7db-86b128e14c2f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` immediately-fulfilled",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "5294a2fe-8aa1-4283-babd-33e5ce6251fd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` eventually-fulfilled",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "f0cf10b6-4f9e-480b-bf96-fcd1fcb60743",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "already-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` already-rejected",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "fcccb4f8-4253-4000-a7cc-0eeabd4775ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` immediately-rejected",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "1a052234-b91b-4b81-898c-819776809f78",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `undefined` eventually-rejected",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "c4b2bbfa-1318-4fb0-bbfc-dabdfa26d5ad",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "81f85551-7a7e-467c-a7db-86b128e14c2f",
              "5294a2fe-8aa1-4283-babd-33e5ce6251fd",
              "f0cf10b6-4f9e-480b-bf96-fcd1fcb60743",
              "fcccb4f8-4253-4000-a7cc-0eeabd4775ea",
              "1a052234-b91b-4b81-898c-819776809f78",
              "c4b2bbfa-1318-4fb0-bbfc-dabdfa26d5ad"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 118,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "6523832e-6c41-4555-a5b8-c7f4c25b092b",
            "title": "The value is `null`",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` already-fulfilled",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "ddd07981-b526-459b-bf8f-c702e3b1ce0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` immediately-fulfilled",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "52886838-7f09-41f6-b7e8-1bb7d27ee3d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` eventually-fulfilled",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "896a391d-a95a-41d0-b6d2-687af7a316ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "already-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` already-rejected",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "930d0fe2-ab7c-41b6-8829-24c958097908",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` immediately-rejected",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "e49b6d8d-5015-4076-9df7-0e99ddeb433a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `null` eventually-rejected",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "e78102f9-1f36-41bb-82a8-edd7cf52d6e5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ddd07981-b526-459b-bf8f-c702e3b1ce0d",
              "52886838-7f09-41f6-b7e8-1bb7d27ee3d6",
              "896a391d-a95a-41d0-b6d2-687af7a316ba",
              "930d0fe2-ab7c-41b6-8829-24c958097908",
              "e49b6d8d-5015-4076-9df7-0e99ddeb433a",
              "e78102f9-1f36-41bb-82a8-edd7cf52d6e5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 120,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "725ecbb6-0f59-4a70-915f-f186e2fcc7ad",
            "title": "The value is `false`",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` already-fulfilled",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "35a37ade-62ac-4bf4-98ed-8b6c847ce076",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` immediately-fulfilled",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "8004ea17-5eb7-4bd3-852e-6c4763f2bbf0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` eventually-fulfilled",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "cfd2facc-541e-440a-ad75-b9972fe38a0c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "already-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` already-rejected",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "fe0e1a2c-c9d8-45e4-b980-113f9655ea62",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` immediately-rejected",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "a84c73fb-c9d6-44ad-8e69-d4ff5100f54e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `false` eventually-rejected",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "d5bf7ef6-7139-412b-87f4-b6180da33d68",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "35a37ade-62ac-4bf4-98ed-8b6c847ce076",
              "8004ea17-5eb7-4bd3-852e-6c4763f2bbf0",
              "cfd2facc-541e-440a-ad75-b9972fe38a0c",
              "fe0e1a2c-c9d8-45e4-b980-113f9655ea62",
              "a84c73fb-c9d6-44ad-8e69-d4ff5100f54e",
              "d5bf7ef6-7139-412b-87f4-b6180da33d68"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 118,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "99ec1e4f-9ce1-49bc-bbf2-aa16b4a89f21",
            "title": "The value is `true`",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` already-fulfilled",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "73eebe97-9e13-444b-8c1d-42763febe63f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` immediately-fulfilled",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "91877669-936d-4a38-a91b-4b0b36b02ccc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` eventually-fulfilled",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "68337f99-f06a-4de9-9601-65a6f689d690",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "already-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` already-rejected",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "98e71de9-2d37-4dcc-acc5-ab2b66bd2701",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` immediately-rejected",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "fa6489b4-f17d-4d66-be15-3c54ebbbb25f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` eventually-rejected",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "3720a14a-47bf-4450-8d00-3d1751ad3ab1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "73eebe97-9e13-444b-8c1d-42763febe63f",
              "91877669-936d-4a38-a91b-4b0b36b02ccc",
              "68337f99-f06a-4de9-9601-65a6f689d690",
              "98e71de9-2d37-4dcc-acc5-ab2b66bd2701",
              "fa6489b4-f17d-4d66-be15-3c54ebbbb25f",
              "3720a14a-47bf-4450-8d00-3d1751ad3ab1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 119,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "b06ed2d1-3cf1-415d-b382-35685fd582e0",
            "title": "The value is `0`",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` already-fulfilled",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "6c678e5c-31a9-4d45-a7d7-775ba12094e9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` immediately-fulfilled",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "8d6df7c5-8c42-495f-aa41-3e356488aecb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` eventually-fulfilled",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "5b0fe802-3c99-4b47-8fac-015dcc000373",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "already-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` already-rejected",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "b8488e54-3b97-4750-9bc8-5e9b40e2e0c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` immediately-rejected",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "c0482eb8-2dbf-408f-9800-d7826f3c262f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `0` eventually-rejected",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "4760a5a1-845f-4f05-971c-376c15ff217a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6c678e5c-31a9-4d45-a7d7-775ba12094e9",
              "8d6df7c5-8c42-495f-aa41-3e356488aecb",
              "5b0fe802-3c99-4b47-8fac-015dcc000373",
              "b8488e54-3b97-4750-9bc8-5e9b40e2e0c3",
              "c0482eb8-2dbf-408f-9800-d7826f3c262f",
              "4760a5a1-845f-4f05-971c-376c15ff217a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 119,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "63ed2244-aebf-40c7-be27-b228afbcb0cf",
            "title": "The value is `true` with `Boolean.prototype` modified to have a `then` method",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Boolean.prototype.then = function () {};",
                "err": {},
                "isRoot": false,
                "uuid": "32003339-981c-42e8-a35c-e493a240fed3",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "delete Boolean.prototype.then;",
                "err": {},
                "isRoot": false,
                "uuid": "5b7a0a3d-d048-44a1-bc42-7fb9f0967150",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method already-fulfilled",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "45184397-b86a-4023-aa06-3bee8ff5670c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method immediately-fulfilled",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "46bd947c-9915-4bd0-8d05-0f518b2c5ef5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method eventually-fulfilled",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "8133b8f5-9652-4829-be6d-28b03ead9c40",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "already-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method already-rejected",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "30c0c076-b00b-4a70-b6a9-758930bcf43e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method immediately-rejected",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "cd527f84-208b-4e77-9411-888053ff2ab5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `true` with `Boolean.prototype` modified to have a `then` method eventually-rejected",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "83dcd5fc-97fe-4c53-9c8c-ce66d2352c51",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "45184397-b86a-4023-aa06-3bee8ff5670c",
              "46bd947c-9915-4bd0-8d05-0f518b2c5ef5",
              "8133b8f5-9652-4829-be6d-28b03ead9c40",
              "30c0c076-b00b-4a70-b6a9-758930bcf43e",
              "cd527f84-208b-4e77-9411-888053ff2ab5",
              "83dcd5fc-97fe-4c53-9c8c-ce66d2352c51"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 118,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          },
          {
            "uuid": "6b8b3645-4a87-4172-af13-cdbb1df94766",
            "title": "The value is `1` with `Number.prototype` modified to have a `then` method",
            "fullFile": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "file": "C:\\Users\\lx619\\AppData\\Roaming\\nvm\\v8.9.3\\node_modules\\promises-aplus-tests\\lib\\tests\\2.3.4.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "Number.prototype.then = function () {};",
                "err": {},
                "isRoot": false,
                "uuid": "1efaa7d5-7097-4e72-a2e0-9c93d447398b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [
              {
                "title": "\"after each\" hook",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method \"after each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "delete Number.prototype.then;",
                "err": {},
                "isRoot": false,
                "uuid": "0f595adf-09b8-47fc-bdeb-30548e421fc5",
                "isHook": true,
                "skipped": false
              }
            ],
            "tests": [
              {
                "title": "already-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method already-fulfilled",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(resolved(value), done);",
                "err": {},
                "isRoot": false,
                "uuid": "06a00683-3b00-4998-9e07-ad6591ae187e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method immediately-fulfilled",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.resolve(value);",
                "err": {},
                "isRoot": false,
                "uuid": "2cb344ca-c436-45fc-9f54-b08f9d3fa4a7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-fulfilled",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method eventually-fulfilled",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.resolve(value);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "516181f2-1f61-4bb1-938e-c691d7a563fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "already-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method already-rejected",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "test(rejected(reason), done);",
                "err": {},
                "isRoot": false,
                "uuid": "81974c8f-377e-4ab6-b150-e0e61514b041",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "immediately-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method immediately-rejected",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nd.reject(reason);",
                "err": {},
                "isRoot": false,
                "uuid": "310a4854-9f60-4eb1-9e1e-acc963d840f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "eventually-rejected",
                "fullTitle": "2.3.4: If `x` is not an object or function, fulfill `promise` with `x` The value is `1` with `Number.prototype` modified to have a `then` method eventually-rejected",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var d = deferred();\ntest(d.promise, done);\nsetTimeout(function () {\n    d.reject(reason);\n}, 50);",
                "err": {},
                "isRoot": false,
                "uuid": "47d392e3-667c-4c44-a0af-a08787dc1670",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "06a00683-3b00-4998-9e07-ad6591ae187e",
              "2cb344ca-c436-45fc-9f54-b08f9d3fa4a7",
              "516181f2-1f61-4bb1-938e-c691d7a563fb",
              "81974c8f-377e-4ab6-b150-e0e61514b041",
              "310a4854-9f60-4eb1-9e1e-acc963d840f8",
              "47d392e3-667c-4c44-a0af-a08787dc1670"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 119,
            "root": false,
            "rootEmpty": false,
            "_timeout": 200
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 200
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 200
  },
  "copyrightYear": 2018
}